// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"traines.eu/time-space-train-planner/providers/dbrest/models"
)

// GetStopsIDArrivalsReader is a Reader for the GetStopsIDArrivals structure.
type GetStopsIDArrivalsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStopsIDArrivalsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStopsIDArrivalsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /stops/{id}/arrivals] GetStopsIDArrivals", response, response.Code())
	}
}

// NewGetStopsIDArrivalsOK creates a GetStopsIDArrivalsOK with default headers values
func NewGetStopsIDArrivalsOK() *GetStopsIDArrivalsOK {
	return &GetStopsIDArrivalsOK{}
}

/*
GetStopsIDArrivalsOK describes a response with status code 200, with default header values.

An object with an array of arrivals, in the [`hafas-client` format](https://github.com/public-transport/hafas-client/blob/6/docs/arrivals.md).
*/
type GetStopsIDArrivalsOK struct {
	Payload *GetStopsIDArrivalsOKBody
}

// IsSuccess returns true when this get stops Id arrivals o k response has a 2xx status code
func (o *GetStopsIDArrivalsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get stops Id arrivals o k response has a 3xx status code
func (o *GetStopsIDArrivalsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stops Id arrivals o k response has a 4xx status code
func (o *GetStopsIDArrivalsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get stops Id arrivals o k response has a 5xx status code
func (o *GetStopsIDArrivalsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get stops Id arrivals o k response a status code equal to that given
func (o *GetStopsIDArrivalsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get stops Id arrivals o k response
func (o *GetStopsIDArrivalsOK) Code() int {
	return 200
}

func (o *GetStopsIDArrivalsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stops/{id}/arrivals][%d] getStopsIdArrivalsOK %s", 200, payload)
}

func (o *GetStopsIDArrivalsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stops/{id}/arrivals][%d] getStopsIdArrivalsOK %s", 200, payload)
}

func (o *GetStopsIDArrivalsOK) GetPayload() *GetStopsIDArrivalsOKBody {
	return o.Payload
}

func (o *GetStopsIDArrivalsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStopsIDArrivalsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetStopsIDArrivalsOKBody get stops ID arrivals o k body
swagger:model GetStopsIDArrivalsOKBody
*/
type GetStopsIDArrivalsOKBody struct {

	// arrivals
	// Required: true
	Arrivals []*models.Alternative `json:"arrivals"`

	// realtime data updated at
	RealtimeDataUpdatedAt int64 `json:"realtimeDataUpdatedAt,omitempty"`
}

// Validate validates this get stops ID arrivals o k body
func (o *GetStopsIDArrivalsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArrivals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStopsIDArrivalsOKBody) validateArrivals(formats strfmt.Registry) error {

	if err := validate.Required("getStopsIdArrivalsOK"+"."+"arrivals", "body", o.Arrivals); err != nil {
		return err
	}

	for i := 0; i < len(o.Arrivals); i++ {
		if swag.IsZero(o.Arrivals[i]) { // not required
			continue
		}

		if o.Arrivals[i] != nil {
			if err := o.Arrivals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getStopsIdArrivalsOK" + "." + "arrivals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getStopsIdArrivalsOK" + "." + "arrivals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get stops ID arrivals o k body based on the context it is used
func (o *GetStopsIDArrivalsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateArrivals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStopsIDArrivalsOKBody) contextValidateArrivals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Arrivals); i++ {

		if o.Arrivals[i] != nil {

			if swag.IsZero(o.Arrivals[i]) { // not required
				return nil
			}

			if err := o.Arrivals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getStopsIdArrivalsOK" + "." + "arrivals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getStopsIdArrivalsOK" + "." + "arrivals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStopsIDArrivalsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStopsIDArrivalsOKBody) UnmarshalBinary(b []byte) error {
	var res GetStopsIDArrivalsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
