// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetJourneysReader is a Reader for the GetJourneys structure.
type GetJourneysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJourneysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetJourneysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 502:
		result := NewGetJourneysBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetJourneysServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /journeys] GetJourneys", response, response.Code())
	}
}

// NewGetJourneysOK creates a GetJourneysOK with default headers values
func NewGetJourneysOK() *GetJourneysOK {
	return &GetJourneysOK{}
}

/*
GetJourneysOK describes a response with status code 200, with default header values.

An array of journeys, in the [`hafas-client` format](https://github.com/public-transport/hafas-client/blob/5/docs/journeys.md).
*/
type GetJourneysOK struct {
	Payload *GetJourneysOKBody
}

// IsSuccess returns true when this get journeys o k response has a 2xx status code
func (o *GetJourneysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get journeys o k response has a 3xx status code
func (o *GetJourneysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get journeys o k response has a 4xx status code
func (o *GetJourneysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get journeys o k response has a 5xx status code
func (o *GetJourneysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get journeys o k response a status code equal to that given
func (o *GetJourneysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get journeys o k response
func (o *GetJourneysOK) Code() int {
	return 200
}

func (o *GetJourneysOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysOK %s", 200, payload)
}

func (o *GetJourneysOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysOK %s", 200, payload)
}

func (o *GetJourneysOK) GetPayload() *GetJourneysOKBody {
	return o.Payload
}

func (o *GetJourneysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetJourneysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJourneysBadGateway creates a GetJourneysBadGateway with default headers values
func NewGetJourneysBadGateway() *GetJourneysBadGateway {
	return &GetJourneysBadGateway{}
}

/*
GetJourneysBadGateway describes a response with status code 502, with default header values.

HAFAS error.
*/
type GetJourneysBadGateway struct {
	Payload *GetJourneysBadGatewayBody
}

// IsSuccess returns true when this get journeys bad gateway response has a 2xx status code
func (o *GetJourneysBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get journeys bad gateway response has a 3xx status code
func (o *GetJourneysBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get journeys bad gateway response has a 4xx status code
func (o *GetJourneysBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this get journeys bad gateway response has a 5xx status code
func (o *GetJourneysBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this get journeys bad gateway response a status code equal to that given
func (o *GetJourneysBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the get journeys bad gateway response
func (o *GetJourneysBadGateway) Code() int {
	return 502
}

func (o *GetJourneysBadGateway) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysBadGateway %s", 502, payload)
}

func (o *GetJourneysBadGateway) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysBadGateway %s", 502, payload)
}

func (o *GetJourneysBadGateway) GetPayload() *GetJourneysBadGatewayBody {
	return o.Payload
}

func (o *GetJourneysBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetJourneysBadGatewayBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJourneysServiceUnavailable creates a GetJourneysServiceUnavailable with default headers values
func NewGetJourneysServiceUnavailable() *GetJourneysServiceUnavailable {
	return &GetJourneysServiceUnavailable{}
}

/*
GetJourneysServiceUnavailable describes a response with status code 503, with default header values.

Too many requests.
*/
type GetJourneysServiceUnavailable struct {
	Payload string
}

// IsSuccess returns true when this get journeys service unavailable response has a 2xx status code
func (o *GetJourneysServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get journeys service unavailable response has a 3xx status code
func (o *GetJourneysServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get journeys service unavailable response has a 4xx status code
func (o *GetJourneysServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get journeys service unavailable response has a 5xx status code
func (o *GetJourneysServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get journeys service unavailable response a status code equal to that given
func (o *GetJourneysServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the get journeys service unavailable response
func (o *GetJourneysServiceUnavailable) Code() int {
	return 503
}

func (o *GetJourneysServiceUnavailable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysServiceUnavailable %s", 503, payload)
}

func (o *GetJourneysServiceUnavailable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /journeys][%d] getJourneysServiceUnavailable %s", 503, payload)
}

func (o *GetJourneysServiceUnavailable) GetPayload() string {
	return o.Payload
}

func (o *GetJourneysServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetJourneysBadGatewayBody get journeys bad gateway body
swagger:model GetJourneysBadGatewayBody
*/
type GetJourneysBadGatewayBody struct {

	// msg
	Msg string `json:"msg,omitempty"`
}

// Validate validates this get journeys bad gateway body
func (o *GetJourneysBadGatewayBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get journeys bad gateway body based on context it is used
func (o *GetJourneysBadGatewayBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysBadGatewayBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysBadGatewayBody) UnmarshalBinary(b []byte) error {
	var res GetJourneysBadGatewayBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBody get journeys o k body
swagger:model GetJourneysOKBody
*/
type GetJourneysOKBody struct {

	// earlier ref
	EarlierRef string `json:"earlierRef,omitempty"`

	// journeys
	Journeys []*GetJourneysOKBodyJourneysItems0 `json:"journeys"`

	// later ref
	LaterRef string `json:"laterRef,omitempty"`
}

// Validate validates this get journeys o k body
func (o *GetJourneysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateJourneys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBody) validateJourneys(formats strfmt.Registry) error {
	if swag.IsZero(o.Journeys) { // not required
		return nil
	}

	for i := 0; i < len(o.Journeys); i++ {
		if swag.IsZero(o.Journeys[i]) { // not required
			continue
		}

		if o.Journeys[i] != nil {
			if err := o.Journeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getJourneysOK" + "." + "journeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getJourneysOK" + "." + "journeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get journeys o k body based on the context it is used
func (o *GetJourneysOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateJourneys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBody) contextValidateJourneys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Journeys); i++ {

		if o.Journeys[i] != nil {

			if swag.IsZero(o.Journeys[i]) { // not required
				return nil
			}

			if err := o.Journeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getJourneysOK" + "." + "journeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getJourneysOK" + "." + "journeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBody) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0 get journeys o k body journeys items0
swagger:model GetJourneysOKBodyJourneysItems0
*/
type GetJourneysOKBodyJourneysItems0 struct {

	// cycle
	// Required: true
	Cycle *GetJourneysOKBodyJourneysItems0Cycle `json:"cycle"`

	// legs
	// Required: true
	Legs []*GetJourneysOKBodyJourneysItems0LegsItems0 `json:"legs"`

	// price
	// Required: true
	Price interface{} `json:"price"`

	// refresh token
	// Required: true
	RefreshToken *string `json:"refreshToken"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0
func (o *GetJourneysOKBodyJourneysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) validateCycle(formats strfmt.Registry) error {

	if err := validate.Required("cycle", "body", o.Cycle); err != nil {
		return err
	}

	if o.Cycle != nil {
		if err := o.Cycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) validateLegs(formats strfmt.Registry) error {

	if err := validate.Required("legs", "body", o.Legs); err != nil {
		return err
	}

	for i := 0; i < len(o.Legs); i++ {
		if swag.IsZero(o.Legs[i]) { // not required
			continue
		}

		if o.Legs[i] != nil {
			if err := o.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) validatePrice(formats strfmt.Registry) error {

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refreshToken", "body", o.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get journeys o k body journeys items0 based on the context it is used
func (o *GetJourneysOKBodyJourneysItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCycle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLegs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) contextValidateCycle(ctx context.Context, formats strfmt.Registry) error {

	if o.Cycle != nil {

		if err := o.Cycle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0) contextValidateLegs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Legs); i++ {

		if o.Legs[i] != nil {

			if swag.IsZero(o.Legs[i]) { // not required
				return nil
			}

			if err := o.Legs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0Cycle get journeys o k body journeys items0 cycle
swagger:model GetJourneysOKBodyJourneysItems0Cycle
*/
type GetJourneysOKBodyJourneysItems0Cycle struct {

	// min
	// Required: true
	Min *int64 `json:"min"`
}

// Validate validates this get journeys o k body journeys items0 cycle
func (o *GetJourneysOKBodyJourneysItems0Cycle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0Cycle) validateMin(formats strfmt.Registry) error {

	if err := validate.Required("cycle"+"."+"min", "body", o.Min); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 cycle based on context it is used
func (o *GetJourneysOKBodyJourneysItems0Cycle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0Cycle) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0Cycle) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0Cycle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0 get journeys o k body journeys items0 legs items0
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0
*/
type GetJourneysOKBodyJourneysItems0LegsItems0 struct {

	// arrival
	// Required: true
	// Format: date-time
	Arrival *strfmt.DateTime `json:"arrival"`

	// arrival delay
	// Required: true
	ArrivalDelay interface{} `json:"arrivalDelay"`

	// arrival platform
	// Required: true
	ArrivalPlatform *string `json:"arrivalPlatform"`

	// cycle
	// Required: true
	Cycle *GetJourneysOKBodyJourneysItems0LegsItems0Cycle `json:"cycle"`

	// departure
	// Required: true
	// Format: date-time
	Departure *strfmt.DateTime `json:"departure"`

	// departure delay
	// Required: true
	DepartureDelay interface{} `json:"departureDelay"`

	// departure platform
	// Required: true
	DeparturePlatform *string `json:"departurePlatform"`

	// destination
	// Required: true
	Destination *GetJourneysOKBodyJourneysItems0LegsItems0Destination `json:"destination"`

	// direction
	// Required: true
	Direction *string `json:"direction"`

	// line
	// Required: true
	Line *GetJourneysOKBodyJourneysItems0LegsItems0Line `json:"line"`

	// origin
	// Required: true
	Origin *GetJourneysOKBodyJourneysItems0LegsItems0Origin `json:"origin"`

	// planned arrival
	// Required: true
	// Format: date-time
	PlannedArrival *strfmt.DateTime `json:"plannedArrival"`

	// planned arrival platform
	// Required: true
	PlannedArrivalPlatform *string `json:"plannedArrivalPlatform"`

	// planned departure
	// Required: true
	// Format: date-time
	PlannedDeparture *strfmt.DateTime `json:"plannedDeparture"`

	// planned departure platform
	// Required: true
	PlannedDeparturePlatform *string `json:"plannedDeparturePlatform"`

	// reachable
	// Required: true
	Reachable *bool `json:"reachable"`

	// trip Id
	// Required: true
	TripID *string `json:"tripId"`
}

// Validate validates this get journeys o k body journeys items0 legs items0
func (o *GetJourneysOKBodyJourneysItems0LegsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArrivalDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateArrivalPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDepartureDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeparturePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLine(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlannedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlannedArrivalPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlannedDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlannedDeparturePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReachable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTripID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateArrival(formats strfmt.Registry) error {

	if err := validate.Required("arrival", "body", o.Arrival); err != nil {
		return err
	}

	if err := validate.FormatOf("arrival", "body", "date-time", o.Arrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateArrivalDelay(formats strfmt.Registry) error {

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateArrivalPlatform(formats strfmt.Registry) error {

	if err := validate.Required("arrivalPlatform", "body", o.ArrivalPlatform); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateCycle(formats strfmt.Registry) error {

	if err := validate.Required("cycle", "body", o.Cycle); err != nil {
		return err
	}

	if o.Cycle != nil {
		if err := o.Cycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateDeparture(formats strfmt.Registry) error {

	if err := validate.Required("departure", "body", o.Departure); err != nil {
		return err
	}

	if err := validate.FormatOf("departure", "body", "date-time", o.Departure.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateDepartureDelay(formats strfmt.Registry) error {

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateDeparturePlatform(formats strfmt.Registry) error {

	if err := validate.Required("departurePlatform", "body", o.DeparturePlatform); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", o.Destination); err != nil {
		return err
	}

	if o.Destination != nil {
		if err := o.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", o.Direction); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateLine(formats strfmt.Registry) error {

	if err := validate.Required("line", "body", o.Line); err != nil {
		return err
	}

	if o.Line != nil {
		if err := o.Line.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateOrigin(formats strfmt.Registry) error {

	if err := validate.Required("origin", "body", o.Origin); err != nil {
		return err
	}

	if o.Origin != nil {
		if err := o.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validatePlannedArrival(formats strfmt.Registry) error {

	if err := validate.Required("plannedArrival", "body", o.PlannedArrival); err != nil {
		return err
	}

	if err := validate.FormatOf("plannedArrival", "body", "date-time", o.PlannedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validatePlannedArrivalPlatform(formats strfmt.Registry) error {

	if err := validate.Required("plannedArrivalPlatform", "body", o.PlannedArrivalPlatform); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validatePlannedDeparture(formats strfmt.Registry) error {

	if err := validate.Required("plannedDeparture", "body", o.PlannedDeparture); err != nil {
		return err
	}

	if err := validate.FormatOf("plannedDeparture", "body", "date-time", o.PlannedDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validatePlannedDeparturePlatform(formats strfmt.Registry) error {

	if err := validate.Required("plannedDeparturePlatform", "body", o.PlannedDeparturePlatform); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateReachable(formats strfmt.Registry) error {

	if err := validate.Required("reachable", "body", o.Reachable); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) validateTripID(formats strfmt.Registry) error {

	if err := validate.Required("tripId", "body", o.TripID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get journeys o k body journeys items0 legs items0 based on the context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCycle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) contextValidateCycle(ctx context.Context, formats strfmt.Registry) error {

	if o.Cycle != nil {

		if err := o.Cycle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if o.Destination != nil {

		if err := o.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) contextValidateLine(ctx context.Context, formats strfmt.Registry) error {

	if o.Line != nil {

		if err := o.Line.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0) contextValidateOrigin(ctx context.Context, formats strfmt.Registry) error {

	if o.Origin != nil {

		if err := o.Origin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0Cycle get journeys o k body journeys items0 legs items0 cycle
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0Cycle
*/
type GetJourneysOKBodyJourneysItems0LegsItems0Cycle struct {

	// max
	// Required: true
	Max *int64 `json:"max"`

	// min
	// Required: true
	Min *int64 `json:"min"`

	// nr
	// Required: true
	Nr *int64 `json:"nr"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 cycle
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMax(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) validateMax(formats strfmt.Registry) error {

	if err := validate.Required("cycle"+"."+"max", "body", o.Max); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) validateMin(formats strfmt.Registry) error {

	if err := validate.Required("cycle"+"."+"min", "body", o.Min); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) validateNr(formats strfmt.Registry) error {

	if err := validate.Required("cycle"+"."+"nr", "body", o.Nr); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 cycle based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Cycle) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0Cycle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0Destination get journeys o k body journeys items0 legs items0 destination
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0Destination
*/
type GetJourneysOKBodyJourneysItems0LegsItems0Destination struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// location
	// Required: true
	Location *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation `json:"location"`

	// name
	// Required: true
	Name *string `json:"name"`

	// products
	// Required: true
	Products *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts `json:"products"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 destination
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) validateID(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) validateName(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products", "body", o.Products); err != nil {
		return err
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) validateType(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get journeys o k body journeys items0 legs items0 destination based on the context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {

		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {

		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination" + "." + "products")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Destination) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0Destination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation get journeys o k body journeys items0 legs items0 destination location
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation
*/
type GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// latitude
	// Required: true
	Latitude *float64 `json:"latitude"`

	// longitude
	// Required: true
	Longitude *float64 `json:"longitude"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 destination location
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"location"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"location"+"."+"latitude", "body", o.Latitude); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"location"+"."+"longitude", "body", o.Longitude); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"location"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 destination location based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0DestinationLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts get journeys o k body journeys items0 legs items0 destination products
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts
*/
type GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts struct {

	// bus
	// Required: true
	Bus *bool `json:"bus"`

	// ferry
	// Required: true
	Ferry *bool `json:"ferry"`

	// national
	// Required: true
	National *bool `json:"national"`

	// national express
	// Required: true
	NationalExpress *bool `json:"nationalExpress"`

	// regional
	// Required: true
	Regional *bool `json:"regional"`

	// regional exp
	// Required: true
	RegionalExp *bool `json:"regionalExp"`

	// suburban
	// Required: true
	Suburban *bool `json:"suburban"`

	// subway
	// Required: true
	Subway *bool `json:"subway"`

	// taxi
	// Required: true
	Taxi *bool `json:"taxi"`

	// tram
	// Required: true
	Tram *bool `json:"tram"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 destination products
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFerry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNational(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNationalExpress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegional(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegionalExp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuburban(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxi(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTram(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"bus", "body", o.Bus); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateFerry(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"ferry", "body", o.Ferry); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateNational(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"national", "body", o.National); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateNationalExpress(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"nationalExpress", "body", o.NationalExpress); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateRegional(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"regional", "body", o.Regional); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateRegionalExp(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"regionalExp", "body", o.RegionalExp); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateSuburban(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"suburban", "body", o.Suburban); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateSubway(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"subway", "body", o.Subway); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateTaxi(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"taxi", "body", o.Taxi); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) validateTram(formats strfmt.Registry) error {

	if err := validate.Required("destination"+"."+"products"+"."+"tram", "body", o.Tram); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 destination products based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0DestinationProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0Line get journeys o k body journeys items0 legs items0 line
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0Line
*/
type GetJourneysOKBodyJourneysItems0LegsItems0Line struct {

	// admin code
	// Required: true
	AdminCode *string `json:"adminCode"`

	// fahrt nr
	// Required: true
	FahrtNr *string `json:"fahrtNr"`

	// id
	// Required: true
	ID *string `json:"id"`

	// mode
	// Required: true
	Mode *string `json:"mode"`

	// name
	// Required: true
	Name *string `json:"name"`

	// operator
	// Required: true
	Operator *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator `json:"operator"`

	// product
	// Required: true
	Product *string `json:"product"`

	// product name
	// Required: true
	ProductName *string `json:"productName"`

	// public
	// Required: true
	Public *bool `json:"public"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 line
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdminCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFahrtNr(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateAdminCode(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"adminCode", "body", o.AdminCode); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateFahrtNr(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"fahrtNr", "body", o.FahrtNr); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateID(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"mode", "body", o.Mode); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateName(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"operator", "body", o.Operator); err != nil {
		return err
	}

	if o.Operator != nil {
		if err := o.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"product", "body", o.Product); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"productName", "body", o.ProductName); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validatePublic(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"public", "body", o.Public); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) validateType(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get journeys o k body journeys items0 legs items0 line based on the context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if o.Operator != nil {

		if err := o.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Line) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0Line
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0LineOperator get journeys o k body journeys items0 legs items0 line operator
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0LineOperator
*/
type GetJourneysOKBodyJourneysItems0LegsItems0LineOperator struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 line operator
func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) validateID(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"operator"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) validateName(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"operator"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) validateType(formats strfmt.Registry) error {

	if err := validate.Required("line"+"."+"operator"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 line operator based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0LineOperator) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0LineOperator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0Origin get journeys o k body journeys items0 legs items0 origin
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0Origin
*/
type GetJourneysOKBodyJourneysItems0LegsItems0Origin struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// location
	// Required: true
	Location *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation `json:"location"`

	// name
	// Required: true
	Name *string `json:"name"`

	// products
	// Required: true
	Products *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts `json:"products"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 origin
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) validateID(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) validateName(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) validateProducts(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products", "body", o.Products); err != nil {
		return err
	}

	if o.Products != nil {
		if err := o.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin" + "." + "products")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) validateType(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get journeys o k body journeys items0 legs items0 origin based on the context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {

		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if o.Products != nil {

		if err := o.Products.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin" + "." + "products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin" + "." + "products")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0Origin) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0Origin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation get journeys o k body journeys items0 legs items0 origin location
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation
*/
type GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// latitude
	// Required: true
	Latitude *float64 `json:"latitude"`

	// longitude
	// Required: true
	Longitude *float64 `json:"longitude"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 origin location
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLatitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLongitude(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) validateID(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"location"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) validateLatitude(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"location"+"."+"latitude", "body", o.Latitude); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) validateLongitude(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"location"+"."+"longitude", "body", o.Longitude); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"location"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 origin location based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0OriginLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts get journeys o k body journeys items0 legs items0 origin products
swagger:model GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts
*/
type GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts struct {

	// bus
	// Required: true
	Bus *bool `json:"bus"`

	// ferry
	// Required: true
	Ferry *bool `json:"ferry"`

	// national
	// Required: true
	National *bool `json:"national"`

	// national express
	// Required: true
	NationalExpress *bool `json:"nationalExpress"`

	// regional
	// Required: true
	Regional *bool `json:"regional"`

	// regional exp
	// Required: true
	RegionalExp *bool `json:"regionalExp"`

	// suburban
	// Required: true
	Suburban *bool `json:"suburban"`

	// subway
	// Required: true
	Subway *bool `json:"subway"`

	// taxi
	// Required: true
	Taxi *bool `json:"taxi"`

	// tram
	// Required: true
	Tram *bool `json:"tram"`
}

// Validate validates this get journeys o k body journeys items0 legs items0 origin products
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFerry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNational(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNationalExpress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegional(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegionalExp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSuburban(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubway(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxi(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTram(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"bus", "body", o.Bus); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateFerry(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"ferry", "body", o.Ferry); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateNational(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"national", "body", o.National); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateNationalExpress(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"nationalExpress", "body", o.NationalExpress); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateRegional(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"regional", "body", o.Regional); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateRegionalExp(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"regionalExp", "body", o.RegionalExp); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateSuburban(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"suburban", "body", o.Suburban); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateSubway(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"subway", "body", o.Subway); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateTaxi(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"taxi", "body", o.Taxi); err != nil {
		return err
	}

	return nil
}

func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) validateTram(formats strfmt.Registry) error {

	if err := validate.Required("origin"+"."+"products"+"."+"tram", "body", o.Tram); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get journeys o k body journeys items0 legs items0 origin products based on context it is used
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts) UnmarshalBinary(b []byte) error {
	var res GetJourneysOKBodyJourneysItems0LegsItems0OriginProducts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
