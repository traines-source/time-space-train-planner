// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetStationsIDReader is a Reader for the GetStationsID structure.
type GetStationsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStationsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStationsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[GET /stations/{id}] GetStationsID", response, response.Code())
	}
}

// NewGetStationsIDOK creates a GetStationsIDOK with default headers values
func NewGetStationsIDOK() *GetStationsIDOK {
	return &GetStationsIDOK{}
}

/*
GetStationsIDOK describes a response with status code 200, with default header values.

A stop/station, in the [db-stations format](https://github.com/derhuerst/db-stations/blob/master/readme.md).
*/
type GetStationsIDOK struct {
	Payload *GetStationsIDOKBody
}

// IsSuccess returns true when this get stations Id o k response has a 2xx status code
func (o *GetStationsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get stations Id o k response has a 3xx status code
func (o *GetStationsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get stations Id o k response has a 4xx status code
func (o *GetStationsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get stations Id o k response has a 5xx status code
func (o *GetStationsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get stations Id o k response a status code equal to that given
func (o *GetStationsIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get stations Id o k response
func (o *GetStationsIDOK) Code() int {
	return 200
}

func (o *GetStationsIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stations/{id}][%d] getStationsIdOK %s", 200, payload)
}

func (o *GetStationsIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /stations/{id}][%d] getStationsIdOK %s", 200, payload)
}

func (o *GetStationsIDOK) GetPayload() *GetStationsIDOKBody {
	return o.Payload
}

func (o *GetStationsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStationsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetStationsIDOKBody get stations ID o k body
swagger:model GetStationsIDOKBody
*/
type GetStationsIDOKBody struct {

	// address
	Address *GetStationsIDOKBodyAddress `json:"address,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// location
	Location *GetStationsIDOKBodyLocation `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nr
	Nr int64 `json:"nr,omitempty"`

	// operator
	Operator *GetStationsIDOKBodyOperator `json:"operator,omitempty"`

	// ril100
	Ril100 string `json:"ril100,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// weight
	Weight float64 `json:"weight,omitempty"`
}

// Validate validates this get stations ID o k body
func (o *GetStationsIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStationsIDOKBody) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(o.Address) { // not required
		return nil
	}

	if o.Address != nil {
		if err := o.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *GetStationsIDOKBody) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetStationsIDOKBody) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(o.Operator) { // not required
		return nil
	}

	if o.Operator != nil {
		if err := o.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get stations ID o k body based on the context it is used
func (o *GetStationsIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStationsIDOKBody) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if o.Address != nil {

		if swag.IsZero(o.Address) { // not required
			return nil
		}

		if err := o.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "address")
			}
			return err
		}
	}

	return nil
}

func (o *GetStationsIDOKBody) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {

		if swag.IsZero(o.Location) { // not required
			return nil
		}

		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *GetStationsIDOKBody) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if o.Operator != nil {

		if swag.IsZero(o.Operator) { // not required
			return nil
		}

		if err := o.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStationsIdOK" + "." + "operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getStationsIdOK" + "." + "operator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStationsIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStationsIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetStationsIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetStationsIDOKBodyAddress get stations ID o k body address
swagger:model GetStationsIDOKBodyAddress
*/
type GetStationsIDOKBodyAddress struct {

	// city
	City string `json:"city,omitempty"`

	// street
	Street string `json:"street,omitempty"`

	// zipcode
	Zipcode string `json:"zipcode,omitempty"`
}

// Validate validates this get stations ID o k body address
func (o *GetStationsIDOKBodyAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get stations ID o k body address based on context it is used
func (o *GetStationsIDOKBodyAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStationsIDOKBodyAddress) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStationsIDOKBodyAddress) UnmarshalBinary(b []byte) error {
	var res GetStationsIDOKBodyAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetStationsIDOKBodyLocation get stations ID o k body location
swagger:model GetStationsIDOKBodyLocation
*/
type GetStationsIDOKBodyLocation struct {

	// latitude
	Latitude float64 `json:"latitude,omitempty"`

	// longitude
	Longitude float64 `json:"longitude,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get stations ID o k body location
func (o *GetStationsIDOKBodyLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get stations ID o k body location based on context it is used
func (o *GetStationsIDOKBodyLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStationsIDOKBodyLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStationsIDOKBodyLocation) UnmarshalBinary(b []byte) error {
	var res GetStationsIDOKBodyLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetStationsIDOKBodyOperator get stations ID o k body operator
swagger:model GetStationsIDOKBodyOperator
*/
type GetStationsIDOKBodyOperator struct {

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this get stations ID o k body operator
func (o *GetStationsIDOKBodyOperator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get stations ID o k body operator based on context it is used
func (o *GetStationsIDOKBodyOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStationsIDOKBodyOperator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStationsIDOKBodyOperator) UnmarshalBinary(b []byte) error {
	var res GetStationsIDOKBodyOperator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
