// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetJourneysParams creates a new GetJourneysParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetJourneysParams() *GetJourneysParams {
	return &GetJourneysParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetJourneysParamsWithTimeout creates a new GetJourneysParams object
// with the ability to set a timeout on a request.
func NewGetJourneysParamsWithTimeout(timeout time.Duration) *GetJourneysParams {
	return &GetJourneysParams{
		timeout: timeout,
	}
}

// NewGetJourneysParamsWithContext creates a new GetJourneysParams object
// with the ability to set a context for a request.
func NewGetJourneysParamsWithContext(ctx context.Context) *GetJourneysParams {
	return &GetJourneysParams{
		Context: ctx,
	}
}

// NewGetJourneysParamsWithHTTPClient creates a new GetJourneysParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetJourneysParamsWithHTTPClient(client *http.Client) *GetJourneysParams {
	return &GetJourneysParams{
		HTTPClient: client,
	}
}

/*
GetJourneysParams contains all the parameters to send to the API endpoint

	for the get journeys operation.

	Typically these are written to a http.Request.
*/
type GetJourneysParams struct {

	/* Accessibility.

	   `partial` or `complete`. – Default: *not accessible*
	*/
	Accessibility *string

	/* Arrival.

	   Compute journeys arriving at this date/time. Mutually exclusive with `departure`. – Default: *now*

	   Format: date-time
	*/
	Arrival *strfmt.DateTime

	/* Bike.

	   Compute only bike-friendly journeys?
	*/
	Bike *bool

	// Bus.
	//
	// Default: true
	Bus *bool

	/* Departure.

	   Compute journeys departing at this date/time. Mutually exclusive with `arrival`. – Default: *now*

	   Format: date-time
	*/
	Departure *strfmt.DateTime

	/* EarlierThan.

	   Compute journeys "before" an `ealierRef`.
	*/
	EarlierThan *string

	/* Entrances.

	   Parse & return entrances of stops/stations?

	   Default: true
	*/
	Entrances *bool

	// Ferry.
	//
	// Default: true
	Ferry *bool

	/* From.

	   "from" as stop/station ID (e.g. from=8010159 for Halle (Saale) Hbf)
	*/
	From *string

	/* FromAddress.

	   "from" as an address (e.g. from.latitude=51.25639&from.longitude=7.46685&from.address=Hansestadt+Breckerfeld,+Hansering+3 for Hansestadt Breckerfeld, Hansering 3)
	*/
	FromAddress *string

	/* FromID.

	   "from" as POI (e.g. from.id=991561765&from.latitude=51.48364&from.longitude=11.98084 for Halle+(Saale),+Stadtpark+Halle+(Grünanlagen))
	*/
	FromID *string

	// FromLatitude.
	FromLatitude *float64

	// FromLongitude.
	FromLongitude *float64

	/* Language.

	   Language of the results.

	   Default: "en"
	*/
	Language *string

	/* LaterThan.

	   Compute journeys "after" an `laterRef`.
	*/
	LaterThan *string

	// National.
	//
	// Default: true
	National *bool

	// NationalExpress.
	//
	// Default: true
	NationalExpress *bool

	/* Polylines.

	   Fetch & parse a shape for each journey leg?
	*/
	Polylines *bool

	/* Pretty.

	   Pretty-print JSON responses?
	*/
	Pretty *bool

	// Regional.
	//
	// Default: true
	Regional *bool

	// RegionalExp.
	//
	// Default: true
	RegionalExp *bool

	/* Remarks.

	   Parse & return hints & warnings?

	   Default: true
	*/
	Remarks *bool

	/* Results.

	   Max. number of journeys.

	   Default: 3
	*/
	Results *int64

	/* ScheduledDays.

	   Parse & return dates each journey is valid on?
	*/
	ScheduledDays *bool

	/* StartWithWalking.

	   Consider walking to nearby stations at the beginning of a journey?

	   Default: true
	*/
	StartWithWalking *bool

	/* Stopovers.

	   Fetch & parse stopovers on the way?
	*/
	Stopovers *bool

	/* SubStops.

	   Parse & return sub-stops of stations?

	   Default: true
	*/
	SubStops *bool

	// Suburban.
	//
	// Default: true
	Suburban *bool

	// Subway.
	//
	// Default: true
	Subway *bool

	// Taxi.
	//
	// Default: true
	Taxi *bool

	/* Tickets.

	   Return information about available tickets?
	*/
	Tickets *bool

	/* To.

	   "to" as stop/station ID
	*/
	To *string

	/* ToAddress.

	   "to" as an address
	*/
	ToAddress *string

	/* ToID.

	   "to" as POI
	*/
	ToID *string

	// ToLatitude.
	ToLatitude *float64

	// ToLongitude.
	ToLongitude *float64

	// Tram.
	//
	// Default: true
	Tram *bool

	/* TransferTime.

	   Minimum time in minutes for a single transfer.
	*/
	TransferTime *int64

	/* Transfers.

	   Maximum number of transfers. – Default: *let HAFAS decide*
	*/
	Transfers *int64

	/* WalkingSpeed.

	   `slow`, `normal` or `fast`.

	   Default: "normal"
	*/
	WalkingSpeed *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get journeys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJourneysParams) WithDefaults() *GetJourneysParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get journeys params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetJourneysParams) SetDefaults() {
	var (
		bikeDefault = bool(false)

		busDefault = bool(true)

		entrancesDefault = bool(true)

		ferryDefault = bool(true)

		languageDefault = string("en")

		nationalDefault = bool(true)

		nationalExpressDefault = bool(true)

		polylinesDefault = bool(false)

		regionalDefault = bool(true)

		regionalExpDefault = bool(true)

		remarksDefault = bool(true)

		resultsDefault = int64(3)

		scheduledDaysDefault = bool(false)

		startWithWalkingDefault = bool(true)

		stopoversDefault = bool(false)

		subStopsDefault = bool(true)

		suburbanDefault = bool(true)

		subwayDefault = bool(true)

		taxiDefault = bool(true)

		ticketsDefault = bool(false)

		tramDefault = bool(true)

		transferTimeDefault = int64(0)

		walkingSpeedDefault = string("normal")
	)

	val := GetJourneysParams{
		Bike:             &bikeDefault,
		Bus:              &busDefault,
		Entrances:        &entrancesDefault,
		Ferry:            &ferryDefault,
		Language:         &languageDefault,
		National:         &nationalDefault,
		NationalExpress:  &nationalExpressDefault,
		Polylines:        &polylinesDefault,
		Regional:         &regionalDefault,
		RegionalExp:      &regionalExpDefault,
		Remarks:          &remarksDefault,
		Results:          &resultsDefault,
		ScheduledDays:    &scheduledDaysDefault,
		StartWithWalking: &startWithWalkingDefault,
		Stopovers:        &stopoversDefault,
		SubStops:         &subStopsDefault,
		Suburban:         &suburbanDefault,
		Subway:           &subwayDefault,
		Taxi:             &taxiDefault,
		Tickets:          &ticketsDefault,
		Tram:             &tramDefault,
		TransferTime:     &transferTimeDefault,
		WalkingSpeed:     &walkingSpeedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get journeys params
func (o *GetJourneysParams) WithTimeout(timeout time.Duration) *GetJourneysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get journeys params
func (o *GetJourneysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get journeys params
func (o *GetJourneysParams) WithContext(ctx context.Context) *GetJourneysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get journeys params
func (o *GetJourneysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get journeys params
func (o *GetJourneysParams) WithHTTPClient(client *http.Client) *GetJourneysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get journeys params
func (o *GetJourneysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessibility adds the accessibility to the get journeys params
func (o *GetJourneysParams) WithAccessibility(accessibility *string) *GetJourneysParams {
	o.SetAccessibility(accessibility)
	return o
}

// SetAccessibility adds the accessibility to the get journeys params
func (o *GetJourneysParams) SetAccessibility(accessibility *string) {
	o.Accessibility = accessibility
}

// WithArrival adds the arrival to the get journeys params
func (o *GetJourneysParams) WithArrival(arrival *strfmt.DateTime) *GetJourneysParams {
	o.SetArrival(arrival)
	return o
}

// SetArrival adds the arrival to the get journeys params
func (o *GetJourneysParams) SetArrival(arrival *strfmt.DateTime) {
	o.Arrival = arrival
}

// WithBike adds the bike to the get journeys params
func (o *GetJourneysParams) WithBike(bike *bool) *GetJourneysParams {
	o.SetBike(bike)
	return o
}

// SetBike adds the bike to the get journeys params
func (o *GetJourneysParams) SetBike(bike *bool) {
	o.Bike = bike
}

// WithBus adds the bus to the get journeys params
func (o *GetJourneysParams) WithBus(bus *bool) *GetJourneysParams {
	o.SetBus(bus)
	return o
}

// SetBus adds the bus to the get journeys params
func (o *GetJourneysParams) SetBus(bus *bool) {
	o.Bus = bus
}

// WithDeparture adds the departure to the get journeys params
func (o *GetJourneysParams) WithDeparture(departure *strfmt.DateTime) *GetJourneysParams {
	o.SetDeparture(departure)
	return o
}

// SetDeparture adds the departure to the get journeys params
func (o *GetJourneysParams) SetDeparture(departure *strfmt.DateTime) {
	o.Departure = departure
}

// WithEarlierThan adds the earlierThan to the get journeys params
func (o *GetJourneysParams) WithEarlierThan(earlierThan *string) *GetJourneysParams {
	o.SetEarlierThan(earlierThan)
	return o
}

// SetEarlierThan adds the earlierThan to the get journeys params
func (o *GetJourneysParams) SetEarlierThan(earlierThan *string) {
	o.EarlierThan = earlierThan
}

// WithEntrances adds the entrances to the get journeys params
func (o *GetJourneysParams) WithEntrances(entrances *bool) *GetJourneysParams {
	o.SetEntrances(entrances)
	return o
}

// SetEntrances adds the entrances to the get journeys params
func (o *GetJourneysParams) SetEntrances(entrances *bool) {
	o.Entrances = entrances
}

// WithFerry adds the ferry to the get journeys params
func (o *GetJourneysParams) WithFerry(ferry *bool) *GetJourneysParams {
	o.SetFerry(ferry)
	return o
}

// SetFerry adds the ferry to the get journeys params
func (o *GetJourneysParams) SetFerry(ferry *bool) {
	o.Ferry = ferry
}

// WithFrom adds the from to the get journeys params
func (o *GetJourneysParams) WithFrom(from *string) *GetJourneysParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get journeys params
func (o *GetJourneysParams) SetFrom(from *string) {
	o.From = from
}

// WithFromAddress adds the fromAddress to the get journeys params
func (o *GetJourneysParams) WithFromAddress(fromAddress *string) *GetJourneysParams {
	o.SetFromAddress(fromAddress)
	return o
}

// SetFromAddress adds the fromAddress to the get journeys params
func (o *GetJourneysParams) SetFromAddress(fromAddress *string) {
	o.FromAddress = fromAddress
}

// WithFromID adds the fromID to the get journeys params
func (o *GetJourneysParams) WithFromID(fromID *string) *GetJourneysParams {
	o.SetFromID(fromID)
	return o
}

// SetFromID adds the fromId to the get journeys params
func (o *GetJourneysParams) SetFromID(fromID *string) {
	o.FromID = fromID
}

// WithFromLatitude adds the fromLatitude to the get journeys params
func (o *GetJourneysParams) WithFromLatitude(fromLatitude *float64) *GetJourneysParams {
	o.SetFromLatitude(fromLatitude)
	return o
}

// SetFromLatitude adds the fromLatitude to the get journeys params
func (o *GetJourneysParams) SetFromLatitude(fromLatitude *float64) {
	o.FromLatitude = fromLatitude
}

// WithFromLongitude adds the fromLongitude to the get journeys params
func (o *GetJourneysParams) WithFromLongitude(fromLongitude *float64) *GetJourneysParams {
	o.SetFromLongitude(fromLongitude)
	return o
}

// SetFromLongitude adds the fromLongitude to the get journeys params
func (o *GetJourneysParams) SetFromLongitude(fromLongitude *float64) {
	o.FromLongitude = fromLongitude
}

// WithLanguage adds the language to the get journeys params
func (o *GetJourneysParams) WithLanguage(language *string) *GetJourneysParams {
	o.SetLanguage(language)
	return o
}

// SetLanguage adds the language to the get journeys params
func (o *GetJourneysParams) SetLanguage(language *string) {
	o.Language = language
}

// WithLaterThan adds the laterThan to the get journeys params
func (o *GetJourneysParams) WithLaterThan(laterThan *string) *GetJourneysParams {
	o.SetLaterThan(laterThan)
	return o
}

// SetLaterThan adds the laterThan to the get journeys params
func (o *GetJourneysParams) SetLaterThan(laterThan *string) {
	o.LaterThan = laterThan
}

// WithNational adds the national to the get journeys params
func (o *GetJourneysParams) WithNational(national *bool) *GetJourneysParams {
	o.SetNational(national)
	return o
}

// SetNational adds the national to the get journeys params
func (o *GetJourneysParams) SetNational(national *bool) {
	o.National = national
}

// WithNationalExpress adds the nationalExpress to the get journeys params
func (o *GetJourneysParams) WithNationalExpress(nationalExpress *bool) *GetJourneysParams {
	o.SetNationalExpress(nationalExpress)
	return o
}

// SetNationalExpress adds the nationalExpress to the get journeys params
func (o *GetJourneysParams) SetNationalExpress(nationalExpress *bool) {
	o.NationalExpress = nationalExpress
}

// WithPolylines adds the polylines to the get journeys params
func (o *GetJourneysParams) WithPolylines(polylines *bool) *GetJourneysParams {
	o.SetPolylines(polylines)
	return o
}

// SetPolylines adds the polylines to the get journeys params
func (o *GetJourneysParams) SetPolylines(polylines *bool) {
	o.Polylines = polylines
}

// WithPretty adds the pretty to the get journeys params
func (o *GetJourneysParams) WithPretty(pretty *bool) *GetJourneysParams {
	o.SetPretty(pretty)
	return o
}

// SetPretty adds the pretty to the get journeys params
func (o *GetJourneysParams) SetPretty(pretty *bool) {
	o.Pretty = pretty
}

// WithRegional adds the regional to the get journeys params
func (o *GetJourneysParams) WithRegional(regional *bool) *GetJourneysParams {
	o.SetRegional(regional)
	return o
}

// SetRegional adds the regional to the get journeys params
func (o *GetJourneysParams) SetRegional(regional *bool) {
	o.Regional = regional
}

// WithRegionalExp adds the regionalExp to the get journeys params
func (o *GetJourneysParams) WithRegionalExp(regionalExp *bool) *GetJourneysParams {
	o.SetRegionalExp(regionalExp)
	return o
}

// SetRegionalExp adds the regionalExp to the get journeys params
func (o *GetJourneysParams) SetRegionalExp(regionalExp *bool) {
	o.RegionalExp = regionalExp
}

// WithRemarks adds the remarks to the get journeys params
func (o *GetJourneysParams) WithRemarks(remarks *bool) *GetJourneysParams {
	o.SetRemarks(remarks)
	return o
}

// SetRemarks adds the remarks to the get journeys params
func (o *GetJourneysParams) SetRemarks(remarks *bool) {
	o.Remarks = remarks
}

// WithResults adds the results to the get journeys params
func (o *GetJourneysParams) WithResults(results *int64) *GetJourneysParams {
	o.SetResults(results)
	return o
}

// SetResults adds the results to the get journeys params
func (o *GetJourneysParams) SetResults(results *int64) {
	o.Results = results
}

// WithScheduledDays adds the scheduledDays to the get journeys params
func (o *GetJourneysParams) WithScheduledDays(scheduledDays *bool) *GetJourneysParams {
	o.SetScheduledDays(scheduledDays)
	return o
}

// SetScheduledDays adds the scheduledDays to the get journeys params
func (o *GetJourneysParams) SetScheduledDays(scheduledDays *bool) {
	o.ScheduledDays = scheduledDays
}

// WithStartWithWalking adds the startWithWalking to the get journeys params
func (o *GetJourneysParams) WithStartWithWalking(startWithWalking *bool) *GetJourneysParams {
	o.SetStartWithWalking(startWithWalking)
	return o
}

// SetStartWithWalking adds the startWithWalking to the get journeys params
func (o *GetJourneysParams) SetStartWithWalking(startWithWalking *bool) {
	o.StartWithWalking = startWithWalking
}

// WithStopovers adds the stopovers to the get journeys params
func (o *GetJourneysParams) WithStopovers(stopovers *bool) *GetJourneysParams {
	o.SetStopovers(stopovers)
	return o
}

// SetStopovers adds the stopovers to the get journeys params
func (o *GetJourneysParams) SetStopovers(stopovers *bool) {
	o.Stopovers = stopovers
}

// WithSubStops adds the subStops to the get journeys params
func (o *GetJourneysParams) WithSubStops(subStops *bool) *GetJourneysParams {
	o.SetSubStops(subStops)
	return o
}

// SetSubStops adds the subStops to the get journeys params
func (o *GetJourneysParams) SetSubStops(subStops *bool) {
	o.SubStops = subStops
}

// WithSuburban adds the suburban to the get journeys params
func (o *GetJourneysParams) WithSuburban(suburban *bool) *GetJourneysParams {
	o.SetSuburban(suburban)
	return o
}

// SetSuburban adds the suburban to the get journeys params
func (o *GetJourneysParams) SetSuburban(suburban *bool) {
	o.Suburban = suburban
}

// WithSubway adds the subway to the get journeys params
func (o *GetJourneysParams) WithSubway(subway *bool) *GetJourneysParams {
	o.SetSubway(subway)
	return o
}

// SetSubway adds the subway to the get journeys params
func (o *GetJourneysParams) SetSubway(subway *bool) {
	o.Subway = subway
}

// WithTaxi adds the taxi to the get journeys params
func (o *GetJourneysParams) WithTaxi(taxi *bool) *GetJourneysParams {
	o.SetTaxi(taxi)
	return o
}

// SetTaxi adds the taxi to the get journeys params
func (o *GetJourneysParams) SetTaxi(taxi *bool) {
	o.Taxi = taxi
}

// WithTickets adds the tickets to the get journeys params
func (o *GetJourneysParams) WithTickets(tickets *bool) *GetJourneysParams {
	o.SetTickets(tickets)
	return o
}

// SetTickets adds the tickets to the get journeys params
func (o *GetJourneysParams) SetTickets(tickets *bool) {
	o.Tickets = tickets
}

// WithTo adds the to to the get journeys params
func (o *GetJourneysParams) WithTo(to *string) *GetJourneysParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get journeys params
func (o *GetJourneysParams) SetTo(to *string) {
	o.To = to
}

// WithToAddress adds the toAddress to the get journeys params
func (o *GetJourneysParams) WithToAddress(toAddress *string) *GetJourneysParams {
	o.SetToAddress(toAddress)
	return o
}

// SetToAddress adds the toAddress to the get journeys params
func (o *GetJourneysParams) SetToAddress(toAddress *string) {
	o.ToAddress = toAddress
}

// WithToID adds the toID to the get journeys params
func (o *GetJourneysParams) WithToID(toID *string) *GetJourneysParams {
	o.SetToID(toID)
	return o
}

// SetToID adds the toId to the get journeys params
func (o *GetJourneysParams) SetToID(toID *string) {
	o.ToID = toID
}

// WithToLatitude adds the toLatitude to the get journeys params
func (o *GetJourneysParams) WithToLatitude(toLatitude *float64) *GetJourneysParams {
	o.SetToLatitude(toLatitude)
	return o
}

// SetToLatitude adds the toLatitude to the get journeys params
func (o *GetJourneysParams) SetToLatitude(toLatitude *float64) {
	o.ToLatitude = toLatitude
}

// WithToLongitude adds the toLongitude to the get journeys params
func (o *GetJourneysParams) WithToLongitude(toLongitude *float64) *GetJourneysParams {
	o.SetToLongitude(toLongitude)
	return o
}

// SetToLongitude adds the toLongitude to the get journeys params
func (o *GetJourneysParams) SetToLongitude(toLongitude *float64) {
	o.ToLongitude = toLongitude
}

// WithTram adds the tram to the get journeys params
func (o *GetJourneysParams) WithTram(tram *bool) *GetJourneysParams {
	o.SetTram(tram)
	return o
}

// SetTram adds the tram to the get journeys params
func (o *GetJourneysParams) SetTram(tram *bool) {
	o.Tram = tram
}

// WithTransferTime adds the transferTime to the get journeys params
func (o *GetJourneysParams) WithTransferTime(transferTime *int64) *GetJourneysParams {
	o.SetTransferTime(transferTime)
	return o
}

// SetTransferTime adds the transferTime to the get journeys params
func (o *GetJourneysParams) SetTransferTime(transferTime *int64) {
	o.TransferTime = transferTime
}

// WithTransfers adds the transfers to the get journeys params
func (o *GetJourneysParams) WithTransfers(transfers *int64) *GetJourneysParams {
	o.SetTransfers(transfers)
	return o
}

// SetTransfers adds the transfers to the get journeys params
func (o *GetJourneysParams) SetTransfers(transfers *int64) {
	o.Transfers = transfers
}

// WithWalkingSpeed adds the walkingSpeed to the get journeys params
func (o *GetJourneysParams) WithWalkingSpeed(walkingSpeed *string) *GetJourneysParams {
	o.SetWalkingSpeed(walkingSpeed)
	return o
}

// SetWalkingSpeed adds the walkingSpeed to the get journeys params
func (o *GetJourneysParams) SetWalkingSpeed(walkingSpeed *string) {
	o.WalkingSpeed = walkingSpeed
}

// WriteToRequest writes these params to a swagger request
func (o *GetJourneysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accessibility != nil {

		// query param accessibility
		var qrAccessibility string

		if o.Accessibility != nil {
			qrAccessibility = *o.Accessibility
		}
		qAccessibility := qrAccessibility
		if qAccessibility != "" {

			if err := r.SetQueryParam("accessibility", qAccessibility); err != nil {
				return err
			}
		}
	}

	if o.Arrival != nil {

		// query param arrival
		var qrArrival strfmt.DateTime

		if o.Arrival != nil {
			qrArrival = *o.Arrival
		}
		qArrival := qrArrival.String()
		if qArrival != "" {

			if err := r.SetQueryParam("arrival", qArrival); err != nil {
				return err
			}
		}
	}

	if o.Bike != nil {

		// query param bike
		var qrBike bool

		if o.Bike != nil {
			qrBike = *o.Bike
		}
		qBike := swag.FormatBool(qrBike)
		if qBike != "" {

			if err := r.SetQueryParam("bike", qBike); err != nil {
				return err
			}
		}
	}

	if o.Bus != nil {

		// query param bus
		var qrBus bool

		if o.Bus != nil {
			qrBus = *o.Bus
		}
		qBus := swag.FormatBool(qrBus)
		if qBus != "" {

			if err := r.SetQueryParam("bus", qBus); err != nil {
				return err
			}
		}
	}

	if o.Departure != nil {

		// query param departure
		var qrDeparture strfmt.DateTime

		if o.Departure != nil {
			qrDeparture = *o.Departure
		}
		qDeparture := qrDeparture.String()
		if qDeparture != "" {

			if err := r.SetQueryParam("departure", qDeparture); err != nil {
				return err
			}
		}
	}

	if o.EarlierThan != nil {

		// query param earlierThan
		var qrEarlierThan string

		if o.EarlierThan != nil {
			qrEarlierThan = *o.EarlierThan
		}
		qEarlierThan := qrEarlierThan
		if qEarlierThan != "" {

			if err := r.SetQueryParam("earlierThan", qEarlierThan); err != nil {
				return err
			}
		}
	}

	if o.Entrances != nil {

		// query param entrances
		var qrEntrances bool

		if o.Entrances != nil {
			qrEntrances = *o.Entrances
		}
		qEntrances := swag.FormatBool(qrEntrances)
		if qEntrances != "" {

			if err := r.SetQueryParam("entrances", qEntrances); err != nil {
				return err
			}
		}
	}

	if o.Ferry != nil {

		// query param ferry
		var qrFerry bool

		if o.Ferry != nil {
			qrFerry = *o.Ferry
		}
		qFerry := swag.FormatBool(qrFerry)
		if qFerry != "" {

			if err := r.SetQueryParam("ferry", qFerry); err != nil {
				return err
			}
		}
	}

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.FromAddress != nil {

		// query param from.address
		var qrFromAddress string

		if o.FromAddress != nil {
			qrFromAddress = *o.FromAddress
		}
		qFromAddress := qrFromAddress
		if qFromAddress != "" {

			if err := r.SetQueryParam("from.address", qFromAddress); err != nil {
				return err
			}
		}
	}

	if o.FromID != nil {

		// query param from.id
		var qrFromID string

		if o.FromID != nil {
			qrFromID = *o.FromID
		}
		qFromID := qrFromID
		if qFromID != "" {

			if err := r.SetQueryParam("from.id", qFromID); err != nil {
				return err
			}
		}
	}

	if o.FromLatitude != nil {

		// query param from.latitude
		var qrFromLatitude float64

		if o.FromLatitude != nil {
			qrFromLatitude = *o.FromLatitude
		}
		qFromLatitude := swag.FormatFloat64(qrFromLatitude)
		if qFromLatitude != "" {

			if err := r.SetQueryParam("from.latitude", qFromLatitude); err != nil {
				return err
			}
		}
	}

	if o.FromLongitude != nil {

		// query param from.longitude
		var qrFromLongitude float64

		if o.FromLongitude != nil {
			qrFromLongitude = *o.FromLongitude
		}
		qFromLongitude := swag.FormatFloat64(qrFromLongitude)
		if qFromLongitude != "" {

			if err := r.SetQueryParam("from.longitude", qFromLongitude); err != nil {
				return err
			}
		}
	}

	if o.Language != nil {

		// query param language
		var qrLanguage string

		if o.Language != nil {
			qrLanguage = *o.Language
		}
		qLanguage := qrLanguage
		if qLanguage != "" {

			if err := r.SetQueryParam("language", qLanguage); err != nil {
				return err
			}
		}
	}

	if o.LaterThan != nil {

		// query param laterThan
		var qrLaterThan string

		if o.LaterThan != nil {
			qrLaterThan = *o.LaterThan
		}
		qLaterThan := qrLaterThan
		if qLaterThan != "" {

			if err := r.SetQueryParam("laterThan", qLaterThan); err != nil {
				return err
			}
		}
	}

	if o.National != nil {

		// query param national
		var qrNational bool

		if o.National != nil {
			qrNational = *o.National
		}
		qNational := swag.FormatBool(qrNational)
		if qNational != "" {

			if err := r.SetQueryParam("national", qNational); err != nil {
				return err
			}
		}
	}

	if o.NationalExpress != nil {

		// query param nationalExpress
		var qrNationalExpress bool

		if o.NationalExpress != nil {
			qrNationalExpress = *o.NationalExpress
		}
		qNationalExpress := swag.FormatBool(qrNationalExpress)
		if qNationalExpress != "" {

			if err := r.SetQueryParam("nationalExpress", qNationalExpress); err != nil {
				return err
			}
		}
	}

	if o.Polylines != nil {

		// query param polylines
		var qrPolylines bool

		if o.Polylines != nil {
			qrPolylines = *o.Polylines
		}
		qPolylines := swag.FormatBool(qrPolylines)
		if qPolylines != "" {

			if err := r.SetQueryParam("polylines", qPolylines); err != nil {
				return err
			}
		}
	}

	if o.Pretty != nil {

		// query param pretty
		var qrPretty bool

		if o.Pretty != nil {
			qrPretty = *o.Pretty
		}
		qPretty := swag.FormatBool(qrPretty)
		if qPretty != "" {

			if err := r.SetQueryParam("pretty", qPretty); err != nil {
				return err
			}
		}
	}

	if o.Regional != nil {

		// query param regional
		var qrRegional bool

		if o.Regional != nil {
			qrRegional = *o.Regional
		}
		qRegional := swag.FormatBool(qrRegional)
		if qRegional != "" {

			if err := r.SetQueryParam("regional", qRegional); err != nil {
				return err
			}
		}
	}

	if o.RegionalExp != nil {

		// query param regionalExp
		var qrRegionalExp bool

		if o.RegionalExp != nil {
			qrRegionalExp = *o.RegionalExp
		}
		qRegionalExp := swag.FormatBool(qrRegionalExp)
		if qRegionalExp != "" {

			if err := r.SetQueryParam("regionalExp", qRegionalExp); err != nil {
				return err
			}
		}
	}

	if o.Remarks != nil {

		// query param remarks
		var qrRemarks bool

		if o.Remarks != nil {
			qrRemarks = *o.Remarks
		}
		qRemarks := swag.FormatBool(qrRemarks)
		if qRemarks != "" {

			if err := r.SetQueryParam("remarks", qRemarks); err != nil {
				return err
			}
		}
	}

	if o.Results != nil {

		// query param results
		var qrResults int64

		if o.Results != nil {
			qrResults = *o.Results
		}
		qResults := swag.FormatInt64(qrResults)
		if qResults != "" {

			if err := r.SetQueryParam("results", qResults); err != nil {
				return err
			}
		}
	}

	if o.ScheduledDays != nil {

		// query param scheduledDays
		var qrScheduledDays bool

		if o.ScheduledDays != nil {
			qrScheduledDays = *o.ScheduledDays
		}
		qScheduledDays := swag.FormatBool(qrScheduledDays)
		if qScheduledDays != "" {

			if err := r.SetQueryParam("scheduledDays", qScheduledDays); err != nil {
				return err
			}
		}
	}

	if o.StartWithWalking != nil {

		// query param startWithWalking
		var qrStartWithWalking bool

		if o.StartWithWalking != nil {
			qrStartWithWalking = *o.StartWithWalking
		}
		qStartWithWalking := swag.FormatBool(qrStartWithWalking)
		if qStartWithWalking != "" {

			if err := r.SetQueryParam("startWithWalking", qStartWithWalking); err != nil {
				return err
			}
		}
	}

	if o.Stopovers != nil {

		// query param stopovers
		var qrStopovers bool

		if o.Stopovers != nil {
			qrStopovers = *o.Stopovers
		}
		qStopovers := swag.FormatBool(qrStopovers)
		if qStopovers != "" {

			if err := r.SetQueryParam("stopovers", qStopovers); err != nil {
				return err
			}
		}
	}

	if o.SubStops != nil {

		// query param subStops
		var qrSubStops bool

		if o.SubStops != nil {
			qrSubStops = *o.SubStops
		}
		qSubStops := swag.FormatBool(qrSubStops)
		if qSubStops != "" {

			if err := r.SetQueryParam("subStops", qSubStops); err != nil {
				return err
			}
		}
	}

	if o.Suburban != nil {

		// query param suburban
		var qrSuburban bool

		if o.Suburban != nil {
			qrSuburban = *o.Suburban
		}
		qSuburban := swag.FormatBool(qrSuburban)
		if qSuburban != "" {

			if err := r.SetQueryParam("suburban", qSuburban); err != nil {
				return err
			}
		}
	}

	if o.Subway != nil {

		// query param subway
		var qrSubway bool

		if o.Subway != nil {
			qrSubway = *o.Subway
		}
		qSubway := swag.FormatBool(qrSubway)
		if qSubway != "" {

			if err := r.SetQueryParam("subway", qSubway); err != nil {
				return err
			}
		}
	}

	if o.Taxi != nil {

		// query param taxi
		var qrTaxi bool

		if o.Taxi != nil {
			qrTaxi = *o.Taxi
		}
		qTaxi := swag.FormatBool(qrTaxi)
		if qTaxi != "" {

			if err := r.SetQueryParam("taxi", qTaxi); err != nil {
				return err
			}
		}
	}

	if o.Tickets != nil {

		// query param tickets
		var qrTickets bool

		if o.Tickets != nil {
			qrTickets = *o.Tickets
		}
		qTickets := swag.FormatBool(qrTickets)
		if qTickets != "" {

			if err := r.SetQueryParam("tickets", qTickets); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo string

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if o.ToAddress != nil {

		// query param to.address
		var qrToAddress string

		if o.ToAddress != nil {
			qrToAddress = *o.ToAddress
		}
		qToAddress := qrToAddress
		if qToAddress != "" {

			if err := r.SetQueryParam("to.address", qToAddress); err != nil {
				return err
			}
		}
	}

	if o.ToID != nil {

		// query param to.id
		var qrToID string

		if o.ToID != nil {
			qrToID = *o.ToID
		}
		qToID := qrToID
		if qToID != "" {

			if err := r.SetQueryParam("to.id", qToID); err != nil {
				return err
			}
		}
	}

	if o.ToLatitude != nil {

		// query param to.latitude
		var qrToLatitude float64

		if o.ToLatitude != nil {
			qrToLatitude = *o.ToLatitude
		}
		qToLatitude := swag.FormatFloat64(qrToLatitude)
		if qToLatitude != "" {

			if err := r.SetQueryParam("to.latitude", qToLatitude); err != nil {
				return err
			}
		}
	}

	if o.ToLongitude != nil {

		// query param to.longitude
		var qrToLongitude float64

		if o.ToLongitude != nil {
			qrToLongitude = *o.ToLongitude
		}
		qToLongitude := swag.FormatFloat64(qrToLongitude)
		if qToLongitude != "" {

			if err := r.SetQueryParam("to.longitude", qToLongitude); err != nil {
				return err
			}
		}
	}

	if o.Tram != nil {

		// query param tram
		var qrTram bool

		if o.Tram != nil {
			qrTram = *o.Tram
		}
		qTram := swag.FormatBool(qrTram)
		if qTram != "" {

			if err := r.SetQueryParam("tram", qTram); err != nil {
				return err
			}
		}
	}

	if o.TransferTime != nil {

		// query param transferTime
		var qrTransferTime int64

		if o.TransferTime != nil {
			qrTransferTime = *o.TransferTime
		}
		qTransferTime := swag.FormatInt64(qrTransferTime)
		if qTransferTime != "" {

			if err := r.SetQueryParam("transferTime", qTransferTime); err != nil {
				return err
			}
		}
	}

	if o.Transfers != nil {

		// query param transfers
		var qrTransfers int64

		if o.Transfers != nil {
			qrTransfers = *o.Transfers
		}
		qTransfers := swag.FormatInt64(qrTransfers)
		if qTransfers != "" {

			if err := r.SetQueryParam("transfers", qTransfers); err != nil {
				return err
			}
		}
	}

	if o.WalkingSpeed != nil {

		// query param walkingSpeed
		var qrWalkingSpeed string

		if o.WalkingSpeed != nil {
			qrWalkingSpeed = *o.WalkingSpeed
		}
		qWalkingSpeed := qrWalkingSpeed
		if qWalkingSpeed != "" {

			if err := r.SetQueryParam("walkingSpeed", qWalkingSpeed); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
