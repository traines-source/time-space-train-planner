// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JourneysOptionsDbProfile JourneysOptions specific to Db Profile
//
// swagger:model JourneysOptionsDbProfile
type JourneysOptionsDbProfile struct {

	// age
	Age float64 `json:"age,omitempty"`

	// ageGroup
	AgeGroup AgeGroup `json:"ageGroup,omitempty"`

	// firstClass
	FirstClass *bool `json:"firstClass,omitempty"`

	// LoyaltyCard
	LoyaltyCard *LoyaltyCard `json:"loyaltyCard,omitempty"`

	// RoutingMode
	RoutingMode RoutingMode `json:"routingMode,omitempty"`
}

// Validate validates this journeys options db profile
func (m *JourneysOptionsDbProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgeGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoyaltyCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysOptionsDbProfile) validateAgeGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.AgeGroup) { // not required
		return nil
	}

	if err := m.AgeGroup.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ageGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ageGroup")
		}
		return err
	}

	return nil
}

func (m *JourneysOptionsDbProfile) validateLoyaltyCard(formats strfmt.Registry) error {
	if swag.IsZero(m.LoyaltyCard) { // not required
		return nil
	}

	if m.LoyaltyCard != nil {
		if err := m.LoyaltyCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loyaltyCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loyaltyCard")
			}
			return err
		}
	}

	return nil
}

func (m *JourneysOptionsDbProfile) validateRoutingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.RoutingMode) { // not required
		return nil
	}

	if err := m.RoutingMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routingMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("routingMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this journeys options db profile based on the context it is used
func (m *JourneysOptionsDbProfile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgeGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoyaltyCard(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoutingMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysOptionsDbProfile) contextValidateAgeGroup(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AgeGroup) { // not required
		return nil
	}

	if err := m.AgeGroup.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ageGroup")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ageGroup")
		}
		return err
	}

	return nil
}

func (m *JourneysOptionsDbProfile) contextValidateLoyaltyCard(ctx context.Context, formats strfmt.Registry) error {

	if m.LoyaltyCard != nil {

		if swag.IsZero(m.LoyaltyCard) { // not required
			return nil
		}

		if err := m.LoyaltyCard.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loyaltyCard")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loyaltyCard")
			}
			return err
		}
	}

	return nil
}

func (m *JourneysOptionsDbProfile) contextValidateRoutingMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingMode) { // not required
		return nil
	}

	if err := m.RoutingMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routingMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("routingMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneysOptionsDbProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneysOptionsDbProfile) UnmarshalBinary(b []byte) error {
	var res JourneysOptionsDbProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
