// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductType A ProductType relates to how a means of transport "works" in local context.
// Example: Even though S-Bahn and U-Bahn in Berlin are both trains, they have different operators, service patterns,
// stations and look different. Therefore, they are two distinct products subway and suburban.
//
// swagger:model ProductType
type ProductType struct {

	// bitmasks
	Bitmasks []float64 `json:"bitmasks"`

	// default
	Default bool `json:"default,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// mode
	// Enum: ["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]
	Mode string `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// short
	Short string `json:"short,omitempty"`
}

// Validate validates this product type
func (m *ProductType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productTypeTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productTypeTypeModePropEnum = append(productTypeTypeModePropEnum, v)
	}
}

const (

	// ProductTypeModeAircraft captures enum value "aircraft"
	ProductTypeModeAircraft string = "aircraft"

	// ProductTypeModeBicycle captures enum value "bicycle"
	ProductTypeModeBicycle string = "bicycle"

	// ProductTypeModeBus captures enum value "bus"
	ProductTypeModeBus string = "bus"

	// ProductTypeModeCar captures enum value "car"
	ProductTypeModeCar string = "car"

	// ProductTypeModeGondola captures enum value "gondola"
	ProductTypeModeGondola string = "gondola"

	// ProductTypeModeTaxi captures enum value "taxi"
	ProductTypeModeTaxi string = "taxi"

	// ProductTypeModeTrain captures enum value "train"
	ProductTypeModeTrain string = "train"

	// ProductTypeModeWalking captures enum value "walking"
	ProductTypeModeWalking string = "walking"

	// ProductTypeModeWatercraft captures enum value "watercraft"
	ProductTypeModeWatercraft string = "watercraft"
)

// prop value enum
func (m *ProductType) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productTypeTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductType) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product type based on context it is used
func (m *ProductType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductType) UnmarshalBinary(b []byte) error {
	var res ProductType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
