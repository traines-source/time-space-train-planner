// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Movement movement
//
// swagger:model Movement
type Movement struct {

	// direction
	Direction string `json:"direction,omitempty"`

	// frames
	Frames []*Frame `json:"frames"`

	// line
	Line *Line `json:"line,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// next stopovers
	NextStopovers []*StopOver `json:"nextStopovers"`

	// polyline
	Polyline *FeatureCollection `json:"polyline,omitempty"`

	// trip Id
	TripID string `json:"tripId,omitempty"`
}

// Validate validates this movement
func (m *Movement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStopovers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Movement) validateFrames(formats strfmt.Registry) error {
	if swag.IsZero(m.Frames) { // not required
		return nil
	}

	for i := 0; i < len(m.Frames); i++ {
		if swag.IsZero(m.Frames[i]) { // not required
			continue
		}

		if m.Frames[i] != nil {
			if err := m.Frames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("frames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movement) validateLine(formats strfmt.Registry) error {
	if swag.IsZero(m.Line) { // not required
		return nil
	}

	if m.Line != nil {
		if err := m.Line.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Movement) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Movement) validateNextStopovers(formats strfmt.Registry) error {
	if swag.IsZero(m.NextStopovers) { // not required
		return nil
	}

	for i := 0; i < len(m.NextStopovers); i++ {
		if swag.IsZero(m.NextStopovers[i]) { // not required
			continue
		}

		if m.NextStopovers[i] != nil {
			if err := m.NextStopovers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movement) validatePolyline(formats strfmt.Registry) error {
	if swag.IsZero(m.Polyline) { // not required
		return nil
	}

	if m.Polyline != nil {
		if err := m.Polyline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this movement based on the context it is used
func (m *Movement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFrames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextStopovers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolyline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Movement) contextValidateFrames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Frames); i++ {

		if m.Frames[i] != nil {

			if swag.IsZero(m.Frames[i]) { // not required
				return nil
			}

			if err := m.Frames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("frames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movement) contextValidateLine(ctx context.Context, formats strfmt.Registry) error {

	if m.Line != nil {

		if swag.IsZero(m.Line) { // not required
			return nil
		}

		if err := m.Line.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Movement) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Movement) contextValidateNextStopovers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NextStopovers); i++ {

		if m.NextStopovers[i] != nil {

			if swag.IsZero(m.NextStopovers[i]) { // not required
				return nil
			}

			if err := m.NextStopovers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Movement) contextValidatePolyline(ctx context.Context, formats strfmt.Registry) error {

	if m.Polyline != nil {

		if swag.IsZero(m.Polyline) { // not required
			return nil
		}

		if err := m.Polyline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Movement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Movement) UnmarshalBinary(b []byte) error {
	var res Movement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
