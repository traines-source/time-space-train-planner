// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopOver A stopover represents a vehicle stopping at a stop/station at a specific time.
//
// swagger:model StopOver
type StopOver struct {

	// additional
	Additional bool `json:"additional,omitempty"`

	// null, if first stopOver of trip
	// Format: date-time
	Arrival strfmt.DateTime `json:"arrival,omitempty"`

	// arrival delay
	// Required: true
	ArrivalDelay *float64 `json:"arrivalDelay"`

	// arrival platform
	ArrivalPlatform string `json:"arrivalPlatform,omitempty"`

	// arrival prognosis type
	ArrivalPrognosisType PrognosisType `json:"arrivalPrognosisType,omitempty"`

	// cancelled
	Cancelled bool `json:"cancelled,omitempty"`

	// null, if last stopOver of trip
	// Format: date-time
	Departure strfmt.DateTime `json:"departure,omitempty"`

	// departure delay
	// Required: true
	DepartureDelay *float64 `json:"departureDelay"`

	// departure platform
	DeparturePlatform string `json:"departurePlatform,omitempty"`

	// departure prognosis type
	DeparturePrognosisType PrognosisType `json:"departurePrognosisType,omitempty"`

	// pass by
	PassBy bool `json:"passBy,omitempty"`

	// planned arrival
	// Format: date-time
	PlannedArrival strfmt.DateTime `json:"plannedArrival,omitempty"`

	// planned arrival platform
	PlannedArrivalPlatform string `json:"plannedArrivalPlatform,omitempty"`

	// planned departure
	// Format: date-time
	PlannedDeparture strfmt.DateTime `json:"plannedDeparture,omitempty"`

	// planned departure platform
	PlannedDeparturePlatform string `json:"plannedDeparturePlatform,omitempty"`

	// prognosed arrival
	// Format: date-time
	PrognosedArrival strfmt.DateTime `json:"prognosedArrival,omitempty"`

	// prognosed arrival platform
	PrognosedArrivalPlatform string `json:"prognosedArrivalPlatform,omitempty"`

	// prognosed departure
	// Format: date-time
	PrognosedDeparture strfmt.DateTime `json:"prognosedDeparture,omitempty"`

	// prognosed departure platform
	PrognosedDeparturePlatform string `json:"prognosedDeparturePlatform,omitempty"`

	// remarks
	Remarks []*Hint `json:"remarks"`

	// stop
	Stop *Stop `json:"stop,omitempty"`
}

// Validate validates this stop over
func (m *StopOver) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalPrognosisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparturePrognosisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosedDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopOver) validateArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.Arrival) { // not required
		return nil
	}

	if err := validate.FormatOf("arrival", "body", "date-time", m.Arrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validateArrivalDelay(formats strfmt.Registry) error {

	if err := validate.Required("arrivalDelay", "body", m.ArrivalDelay); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validateArrivalPrognosisType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrivalPrognosisType) { // not required
		return nil
	}

	if err := m.ArrivalPrognosisType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arrivalPrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arrivalPrognosisType")
		}
		return err
	}

	return nil
}

func (m *StopOver) validateDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.Departure) { // not required
		return nil
	}

	if err := validate.FormatOf("departure", "body", "date-time", m.Departure.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validateDepartureDelay(formats strfmt.Registry) error {

	if err := validate.Required("departureDelay", "body", m.DepartureDelay); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validateDeparturePrognosisType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeparturePrognosisType) { // not required
		return nil
	}

	if err := m.DeparturePrognosisType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("departurePrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("departurePrognosisType")
		}
		return err
	}

	return nil
}

func (m *StopOver) validatePlannedArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.PlannedArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("plannedArrival", "body", "date-time", m.PlannedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validatePlannedDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.PlannedDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("plannedDeparture", "body", "date-time", m.PlannedDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validatePrognosedArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosedArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("prognosedArrival", "body", "date-time", m.PrognosedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validatePrognosedDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosedDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("prognosedDeparture", "body", "date-time", m.PrognosedDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StopOver) validateRemarks(formats strfmt.Registry) error {
	if swag.IsZero(m.Remarks) { // not required
		return nil
	}

	for i := 0; i < len(m.Remarks); i++ {
		if swag.IsZero(m.Remarks[i]) { // not required
			continue
		}

		if m.Remarks[i] != nil {
			if err := m.Remarks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StopOver) validateStop(formats strfmt.Registry) error {
	if swag.IsZero(m.Stop) { // not required
		return nil
	}

	if m.Stop != nil {
		if err := m.Stop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stop over based on the context it is used
func (m *StopOver) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrivalPrognosisType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeparturePrognosisType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopOver) contextValidateArrivalPrognosisType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ArrivalPrognosisType) { // not required
		return nil
	}

	if err := m.ArrivalPrognosisType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arrivalPrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arrivalPrognosisType")
		}
		return err
	}

	return nil
}

func (m *StopOver) contextValidateDeparturePrognosisType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DeparturePrognosisType) { // not required
		return nil
	}

	if err := m.DeparturePrognosisType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("departurePrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("departurePrognosisType")
		}
		return err
	}

	return nil
}

func (m *StopOver) contextValidateRemarks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Remarks); i++ {

		if m.Remarks[i] != nil {

			if swag.IsZero(m.Remarks[i]) { // not required
				return nil
			}

			if err := m.Remarks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StopOver) contextValidateStop(ctx context.Context, formats strfmt.Registry) error {

	if m.Stop != nil {

		if swag.IsZero(m.Stop) { // not required
			return nil
		}

		if err := m.Stop.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopOver) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopOver) UnmarshalBinary(b []byte) error {
	var res StopOver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
