// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JourneysFromTripOptions journeys from trip options
//
// swagger:model JourneysFromTripOptions
type JourneysFromTripOptions struct {

	// 'none', 'partial' or 'complete'
	Accessibility *string `json:"accessibility,omitempty"`

	// parse & expose entrances of stops/stations?
	Entrances *bool `json:"entrances,omitempty"`

	// return leg shapes?
	Polylines *bool `json:"polylines,omitempty"`

	// products
	Products Products `json:"products,omitempty"`

	// parse & expose hints & warnings?
	Remarks *bool `json:"remarks,omitempty"`

	// return stations on the way?
	Stopovers *bool `json:"stopovers,omitempty"`

	// parse & expose sub-stops of stations?
	SubStops *bool `json:"subStops,omitempty"`

	// return tickets?
	Tickets *bool `json:"tickets,omitempty"`

	// minimum time for a single transfer in minutes
	TransferTime float64 `json:"transferTime,omitempty"`
}

// Validate validates this journeys from trip options
func (m *JourneysFromTripOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysFromTripOptions) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this journeys from trip options based on the context it is used
func (m *JourneysFromTripOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysFromTripOptions) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneysFromTripOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneysFromTripOptions) UnmarshalBinary(b []byte) error {
	var res JourneysFromTripOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
