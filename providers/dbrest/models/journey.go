// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Journey A journey is a computed set of directions to get from A to B at a specific time.
// It would typically be the result of a route planning algorithm.
//
// swagger:model Journey
type Journey struct {

	// cycle
	Cycle *Cycle `json:"cycle,omitempty"`

	// legs
	Legs []*Leg `json:"legs"`

	// price
	Price *Price `json:"price,omitempty"`

	// refresh token
	RefreshToken string `json:"refreshToken,omitempty"`

	// remarks
	Remarks []*Hint `json:"remarks"`

	// scheduled days
	ScheduledDays ScheduledDays `json:"scheduledDays,omitempty"`

	// type
	// Enum: ["journey"]
	Type string `json:"type,omitempty"`
}

// Validate validates this journey
func (m *Journey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Journey) validateCycle(formats strfmt.Registry) error {
	if swag.IsZero(m.Cycle) { // not required
		return nil
	}

	if m.Cycle != nil {
		if err := m.Cycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (m *Journey) validateLegs(formats strfmt.Registry) error {
	if swag.IsZero(m.Legs) { // not required
		return nil
	}

	for i := 0; i < len(m.Legs); i++ {
		if swag.IsZero(m.Legs[i]) { // not required
			continue
		}

		if m.Legs[i] != nil {
			if err := m.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Journey) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *Journey) validateRemarks(formats strfmt.Registry) error {
	if swag.IsZero(m.Remarks) { // not required
		return nil
	}

	for i := 0; i < len(m.Remarks); i++ {
		if swag.IsZero(m.Remarks[i]) { // not required
			continue
		}

		if m.Remarks[i] != nil {
			if err := m.Remarks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Journey) validateScheduledDays(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDays) { // not required
		return nil
	}

	if m.ScheduledDays != nil {
		if err := m.ScheduledDays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDays")
			}
			return err
		}
	}

	return nil
}

var journeyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["journey"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		journeyTypeTypePropEnum = append(journeyTypeTypePropEnum, v)
	}
}

const (

	// JourneyTypeJourney captures enum value "journey"
	JourneyTypeJourney string = "journey"
)

// prop value enum
func (m *Journey) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, journeyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Journey) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this journey based on the context it is used
func (m *Journey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCycle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLegs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Journey) contextValidateCycle(ctx context.Context, formats strfmt.Registry) error {

	if m.Cycle != nil {

		if swag.IsZero(m.Cycle) { // not required
			return nil
		}

		if err := m.Cycle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (m *Journey) contextValidateLegs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Legs); i++ {

		if m.Legs[i] != nil {

			if swag.IsZero(m.Legs[i]) { // not required
				return nil
			}

			if err := m.Legs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Journey) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {

		if swag.IsZero(m.Price) { // not required
			return nil
		}

		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *Journey) contextValidateRemarks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Remarks); i++ {

		if m.Remarks[i] != nil {

			if swag.IsZero(m.Remarks[i]) { // not required
				return nil
			}

			if err := m.Remarks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Journey) contextValidateScheduledDays(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledDays) { // not required
		return nil
	}

	if err := m.ScheduledDays.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scheduledDays")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scheduledDays")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Journey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Journey) UnmarshalBinary(b []byte) error {
	var res Journey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
