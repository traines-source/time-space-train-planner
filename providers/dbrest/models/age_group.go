// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AgeGroup age group
//
// swagger:model AgeGroup
type AgeGroup string

func NewAgeGroup(value AgeGroup) *AgeGroup {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AgeGroup.
func (m AgeGroup) Pointer() *AgeGroup {
	return &m
}

const (

	// AgeGroupB captures enum value "B"
	AgeGroupB AgeGroup = "B"

	// AgeGroupE captures enum value "E"
	AgeGroupE AgeGroup = "E"

	// AgeGroupK captures enum value "K"
	AgeGroupK AgeGroup = "K"

	// AgeGroupS captures enum value "S"
	AgeGroupS AgeGroup = "S"

	// AgeGroupY captures enum value "Y"
	AgeGroupY AgeGroup = "Y"
)

// for schema
var ageGroupEnum []interface{}

func init() {
	var res []AgeGroup
	if err := json.Unmarshal([]byte(`["B","E","K","S","Y"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ageGroupEnum = append(ageGroupEnum, v)
	}
}

func (m AgeGroup) validateAgeGroupEnum(path, location string, value AgeGroup) error {
	if err := validate.EnumCase(path, location, value, ageGroupEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this age group
func (m AgeGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAgeGroupEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this age group based on context it is used
func (m AgeGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
