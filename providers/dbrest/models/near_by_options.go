// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NearByOptions near by options
//
// swagger:model NearByOptions
type NearByOptions struct {

	// maximum walking distance in meters
	Distance float64 `json:"distance,omitempty"`

	// parse & expose entrances of stops/stations?
	Entrances *bool `json:"entrances,omitempty"`

	// language
	Language *string `json:"language,omitempty"`

	// parse & expose lines at each stop/station?
	LinesOfStops *bool `json:"linesOfStops,omitempty"`

	// return points of interest?
	Poi *bool `json:"poi,omitempty"`

	// products
	Products Products `json:"products,omitempty"`

	// maximum number of results
	Results *float64 `json:"results,omitempty"`

	// return stops/stations?
	Stops *bool `json:"stops,omitempty"`

	// parse & expose sub-stops of stations?
	SubStops *bool `json:"subStops,omitempty"`
}

// Validate validates this near by options
func (m *NearByOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NearByOptions) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this near by options based on the context it is used
func (m *NearByOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NearByOptions) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NearByOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NearByOptions) UnmarshalBinary(b []byte) error {
	var res NearByOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
