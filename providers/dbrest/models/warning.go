// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Warning warning
//
// swagger:model Warning
type Warning struct {

	// affected lines
	AffectedLines []*Line `json:"affectedLines"`

	// categories
	Categories []float64 `json:"categories"`

	// category
	Category string `json:"category,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// edges
	Edges []*Edge `json:"edges"`

	// events
	Events []*Event `json:"events"`

	// from stops
	FromStops []*Stop `json:"fromStops"`

	// icon
	Icon interface{} `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// modified
	Modified string `json:"modified,omitempty"`

	// priority
	Priority float64 `json:"priority,omitempty"`

	// products
	Products Products `json:"products,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// to stops
	ToStops []*Stop `json:"toStops"`

	// type
	// Enum: ["status","warning"]
	Type string `json:"type,omitempty"`

	// valid from
	ValidFrom string `json:"validFrom,omitempty"`

	// valid until
	ValidUntil string `json:"validUntil,omitempty"`
}

// Validate validates this warning
func (m *Warning) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffectedLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Warning) validateAffectedLines(formats strfmt.Registry) error {
	if swag.IsZero(m.AffectedLines) { // not required
		return nil
	}

	for i := 0; i < len(m.AffectedLines); i++ {
		if swag.IsZero(m.AffectedLines[i]) { // not required
			continue
		}

		if m.AffectedLines[i] != nil {
			if err := m.AffectedLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedLines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) validateEdges(formats strfmt.Registry) error {
	if swag.IsZero(m.Edges) { // not required
		return nil
	}

	for i := 0; i < len(m.Edges); i++ {
		if swag.IsZero(m.Edges[i]) { // not required
			continue
		}

		if m.Edges[i] != nil {
			if err := m.Edges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("edges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) validateFromStops(formats strfmt.Registry) error {
	if swag.IsZero(m.FromStops) { // not required
		return nil
	}

	for i := 0; i < len(m.FromStops); i++ {
		if swag.IsZero(m.FromStops[i]) { // not required
			continue
		}

		if m.FromStops[i] != nil {
			if err := m.FromStops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

func (m *Warning) validateToStops(formats strfmt.Registry) error {
	if swag.IsZero(m.ToStops) { // not required
		return nil
	}

	for i := 0; i < len(m.ToStops); i++ {
		if swag.IsZero(m.ToStops[i]) { // not required
			continue
		}

		if m.ToStops[i] != nil {
			if err := m.ToStops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var warningTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["status","warning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		warningTypeTypePropEnum = append(warningTypeTypePropEnum, v)
	}
}

const (

	// WarningTypeStatus captures enum value "status"
	WarningTypeStatus string = "status"

	// WarningTypeWarning captures enum value "warning"
	WarningTypeWarning string = "warning"
)

// prop value enum
func (m *Warning) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, warningTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Warning) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this warning based on the context it is used
func (m *Warning) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffectedLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFromStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Warning) contextValidateAffectedLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AffectedLines); i++ {

		if m.AffectedLines[i] != nil {

			if swag.IsZero(m.AffectedLines[i]) { // not required
				return nil
			}

			if err := m.AffectedLines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("affectedLines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("affectedLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) contextValidateEdges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Edges); i++ {

		if m.Edges[i] != nil {

			if swag.IsZero(m.Edges[i]) { // not required
				return nil
			}

			if err := m.Edges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("edges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("edges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {

			if swag.IsZero(m.Events[i]) { // not required
				return nil
			}

			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) contextValidateFromStops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FromStops); i++ {

		if m.FromStops[i] != nil {

			if swag.IsZero(m.FromStops[i]) { // not required
				return nil
			}

			if err := m.FromStops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fromStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fromStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Warning) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

func (m *Warning) contextValidateToStops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToStops); i++ {

		if m.ToStops[i] != nil {

			if swag.IsZero(m.ToStops[i]) { // not required
				return nil
			}

			if err := m.ToStops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Warning) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Warning) UnmarshalBinary(b []byte) error {
	var res Warning
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
