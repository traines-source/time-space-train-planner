// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Route A route represents a single set of stations, of a single line.
//
// swagger:model Route
type Route struct {

	// id
	ID string `json:"id,omitempty"`

	// line
	Line string `json:"line,omitempty"`

	// mode
	// Enum: ["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]
	Mode string `json:"mode,omitempty"`

	// stop ids
	Stops []string `json:"stops"`

	// type
	// Enum: ["route"]
	Type string `json:"type,omitempty"`
}

// Validate validates this route
func (m *Route) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routeTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeModePropEnum = append(routeTypeModePropEnum, v)
	}
}

const (

	// RouteModeAircraft captures enum value "aircraft"
	RouteModeAircraft string = "aircraft"

	// RouteModeBicycle captures enum value "bicycle"
	RouteModeBicycle string = "bicycle"

	// RouteModeBus captures enum value "bus"
	RouteModeBus string = "bus"

	// RouteModeCar captures enum value "car"
	RouteModeCar string = "car"

	// RouteModeGondola captures enum value "gondola"
	RouteModeGondola string = "gondola"

	// RouteModeTaxi captures enum value "taxi"
	RouteModeTaxi string = "taxi"

	// RouteModeTrain captures enum value "train"
	RouteModeTrain string = "train"

	// RouteModeWalking captures enum value "walking"
	RouteModeWalking string = "walking"

	// RouteModeWatercraft captures enum value "watercraft"
	RouteModeWatercraft string = "watercraft"
)

// prop value enum
func (m *Route) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

var routeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["route"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeTypeTypePropEnum = append(routeTypeTypePropEnum, v)
	}
}

const (

	// RouteTypeRoute captures enum value "route"
	RouteTypeRoute string = "route"
)

// prop value enum
func (m *Route) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, routeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Route) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this route based on context it is used
func (m *Route) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Route) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Route) UnmarshalBinary(b []byte) error {
	var res Route
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
