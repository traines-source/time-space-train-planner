// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stop A stop is a single small point or structure at which vehicles stop.
// A stop always belongs to a station. It may for example be a sign, a basic shelter or a railway platform.
//
// swagger:model Stop
type Stop struct {

	// distance
	Distance float64 `json:"distance,omitempty"`

	// entrances
	Entrances []*Location `json:"entrances"`

	// id
	ID string `json:"id,omitempty"`

	// ids
	Ids Ids `json:"ids,omitempty"`

	// is meta
	IsMeta bool `json:"isMeta,omitempty"`

	// lines
	Lines []*Line `json:"lines"`

	// load factor
	LoadFactor string `json:"loadFactor,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// products
	Products Products `json:"products,omitempty"`

	// reisezentrum opening hours
	ReisezentrumOpeningHours *ReisezentrumOpeningHours `json:"reisezentrumOpeningHours,omitempty"`

	// station
	Station *Station `json:"station,omitempty"`

	// transit authority
	TransitAuthority string `json:"transitAuthority,omitempty"`

	// type
	// Enum: ["stop"]
	Type string `json:"type,omitempty"`
}

// Validate validates this stop
func (m *Stop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntrances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReisezentrumOpeningHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stop) validateEntrances(formats strfmt.Registry) error {
	if swag.IsZero(m.Entrances) { // not required
		return nil
	}

	for i := 0; i < len(m.Entrances); i++ {
		if swag.IsZero(m.Entrances[i]) { // not required
			continue
		}

		if m.Entrances[i] != nil {
			if err := m.Entrances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entrances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entrances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stop) validateIds(formats strfmt.Registry) error {
	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if m.Ids != nil {
		if err := m.Ids.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ids")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ids")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) validateLines(formats strfmt.Registry) error {
	if swag.IsZero(m.Lines) { // not required
		return nil
	}

	for i := 0; i < len(m.Lines); i++ {
		if swag.IsZero(m.Lines[i]) { // not required
			continue
		}

		if m.Lines[i] != nil {
			if err := m.Lines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stop) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) validateReisezentrumOpeningHours(formats strfmt.Registry) error {
	if swag.IsZero(m.ReisezentrumOpeningHours) { // not required
		return nil
	}

	if m.ReisezentrumOpeningHours != nil {
		if err := m.ReisezentrumOpeningHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reisezentrumOpeningHours")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reisezentrumOpeningHours")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) validateStation(formats strfmt.Registry) error {
	if swag.IsZero(m.Station) { // not required
		return nil
	}

	if m.Station != nil {
		if err := m.Station.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("station")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("station")
			}
			return err
		}
	}

	return nil
}

var stopTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopTypeTypePropEnum = append(stopTypeTypePropEnum, v)
	}
}

const (

	// StopTypeStop captures enum value "stop"
	StopTypeStop string = "stop"
)

// prop value enum
func (m *Stop) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stopTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stop) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stop based on the context it is used
func (m *Stop) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntrances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReisezentrumOpeningHours(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stop) contextValidateEntrances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entrances); i++ {

		if m.Entrances[i] != nil {

			if swag.IsZero(m.Entrances[i]) { // not required
				return nil
			}

			if err := m.Entrances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entrances" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("entrances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stop) contextValidateIds(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if err := m.Ids.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ids")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ids")
		}
		return err
	}

	return nil
}

func (m *Stop) contextValidateLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Lines); i++ {

		if m.Lines[i] != nil {

			if swag.IsZero(m.Lines[i]) { // not required
				return nil
			}

			if err := m.Lines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lines" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Stop) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

func (m *Stop) contextValidateReisezentrumOpeningHours(ctx context.Context, formats strfmt.Registry) error {

	if m.ReisezentrumOpeningHours != nil {

		if swag.IsZero(m.ReisezentrumOpeningHours) { // not required
			return nil
		}

		if err := m.ReisezentrumOpeningHours.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reisezentrumOpeningHours")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reisezentrumOpeningHours")
			}
			return err
		}
	}

	return nil
}

func (m *Stop) contextValidateStation(ctx context.Context, formats strfmt.Registry) error {

	if m.Station != nil {

		if swag.IsZero(m.Station) { // not required
			return nil
		}

		if err := m.Station.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("station")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("station")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stop) UnmarshalBinary(b []byte) error {
	var res Stop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
