// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RoutingMode routing mode
//
// swagger:model RoutingMode
type RoutingMode string

func NewRoutingMode(value RoutingMode) *RoutingMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RoutingMode.
func (m RoutingMode) Pointer() *RoutingMode {
	return &m
}

const (

	// RoutingModeFULL captures enum value "FULL"
	RoutingModeFULL RoutingMode = "FULL"

	// RoutingModeHYBRID captures enum value "HYBRID"
	RoutingModeHYBRID RoutingMode = "HYBRID"

	// RoutingModeINFOS captures enum value "INFOS"
	RoutingModeINFOS RoutingMode = "INFOS"

	// RoutingModeOFF captures enum value "OFF"
	RoutingModeOFF RoutingMode = "OFF"

	// RoutingModeREALTIME captures enum value "REALTIME"
	RoutingModeREALTIME RoutingMode = "REALTIME"

	// RoutingModeSERVERDEFAULT captures enum value "SERVER_DEFAULT"
	RoutingModeSERVERDEFAULT RoutingMode = "SERVER_DEFAULT"
)

// for schema
var routingModeEnum []interface{}

func init() {
	var res []RoutingMode
	if err := json.Unmarshal([]byte(`["FULL","HYBRID","INFOS","OFF","REALTIME","SERVER_DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingModeEnum = append(routingModeEnum, v)
	}
}

func (m RoutingMode) validateRoutingModeEnum(path, location string, value RoutingMode) error {
	if err := validate.EnumCase(path, location, value, routingModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this routing mode
func (m RoutingMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRoutingModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this routing mode based on context it is used
func (m RoutingMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
