// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alternative alternative
//
// swagger:model Alternative
type Alternative struct {

	// cancelled
	Cancelled bool `json:"cancelled,omitempty"`

	// current trip position
	CurrentTripPosition *Location `json:"currentTripPosition,omitempty"`

	// delay
	// Required: true
	Delay *float64 `json:"delay"`

	// destination
	Destination *Stop `json:"destination,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// frames
	Frames []*Frame `json:"frames"`

	// line
	Line *Line `json:"line,omitempty"`

	// load factor
	LoadFactor string `json:"loadFactor,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// next stopovers
	NextStopovers []*StopOver `json:"nextStopovers"`

	// origin
	Origin *Stop `json:"origin,omitempty"`

	// planned platform
	PlannedPlatform string `json:"plannedPlatform,omitempty"`

	// planned when
	// Format: date-time
	PlannedWhen strfmt.DateTime `json:"plannedWhen,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// polyline
	Polyline *FeatureCollection `json:"polyline,omitempty"`

	// previous stopovers
	PreviousStopovers []*StopOver `json:"previousStopovers"`

	// prognosed platform
	PrognosedPlatform string `json:"prognosedPlatform,omitempty"`

	// prognosed when
	// Format: date-time
	PrognosedWhen strfmt.DateTime `json:"prognosedWhen,omitempty"`

	// prognosis type
	PrognosisType PrognosisType `json:"prognosisType,omitempty"`

	// provenance
	Provenance string `json:"provenance,omitempty"`

	// remarks
	Remarks []*Hint `json:"remarks"`

	// stop
	Stop *Stop `json:"stop,omitempty"`

	// trip Id
	TripID string `json:"tripId,omitempty"`

	// when
	// Format: date-time
	When strfmt.DateTime `json:"when,omitempty"`
}

// Validate validates this alternative
func (m *Alternative) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentTripPosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextStopovers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviousStopovers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosedWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alternative) validateCurrentTripPosition(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentTripPosition) { // not required
		return nil
	}

	if m.CurrentTripPosition != nil {
		if err := m.CurrentTripPosition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentTripPosition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentTripPosition")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validateDelay(formats strfmt.Registry) error {

	if err := validate.Required("delay", "body", m.Delay); err != nil {
		return err
	}

	return nil
}

func (m *Alternative) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validateFrames(formats strfmt.Registry) error {
	if swag.IsZero(m.Frames) { // not required
		return nil
	}

	for i := 0; i < len(m.Frames); i++ {
		if swag.IsZero(m.Frames[i]) { // not required
			continue
		}

		if m.Frames[i] != nil {
			if err := m.Frames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("frames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) validateLine(formats strfmt.Registry) error {
	if swag.IsZero(m.Line) { // not required
		return nil
	}

	if m.Line != nil {
		if err := m.Line.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validateNextStopovers(formats strfmt.Registry) error {
	if swag.IsZero(m.NextStopovers) { // not required
		return nil
	}

	for i := 0; i < len(m.NextStopovers); i++ {
		if swag.IsZero(m.NextStopovers[i]) { // not required
			continue
		}

		if m.NextStopovers[i] != nil {
			if err := m.NextStopovers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validatePlannedWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.PlannedWhen) { // not required
		return nil
	}

	if err := validate.FormatOf("plannedWhen", "body", "date-time", m.PlannedWhen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Alternative) validatePolyline(formats strfmt.Registry) error {
	if swag.IsZero(m.Polyline) { // not required
		return nil
	}

	if m.Polyline != nil {
		if err := m.Polyline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validatePreviousStopovers(formats strfmt.Registry) error {
	if swag.IsZero(m.PreviousStopovers) { // not required
		return nil
	}

	for i := 0; i < len(m.PreviousStopovers); i++ {
		if swag.IsZero(m.PreviousStopovers[i]) { // not required
			continue
		}

		if m.PreviousStopovers[i] != nil {
			if err := m.PreviousStopovers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) validatePrognosedWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosedWhen) { // not required
		return nil
	}

	if err := validate.FormatOf("prognosedWhen", "body", "date-time", m.PrognosedWhen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Alternative) validatePrognosisType(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosisType) { // not required
		return nil
	}

	if err := m.PrognosisType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prognosisType")
		}
		return err
	}

	return nil
}

func (m *Alternative) validateRemarks(formats strfmt.Registry) error {
	if swag.IsZero(m.Remarks) { // not required
		return nil
	}

	for i := 0; i < len(m.Remarks); i++ {
		if swag.IsZero(m.Remarks[i]) { // not required
			continue
		}

		if m.Remarks[i] != nil {
			if err := m.Remarks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) validateStop(formats strfmt.Registry) error {
	if swag.IsZero(m.Stop) { // not required
		return nil
	}

	if m.Stop != nil {
		if err := m.Stop.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) validateWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.When) { // not required
		return nil
	}

	if err := validate.FormatOf("when", "body", "date-time", m.When.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this alternative based on the context it is used
func (m *Alternative) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentTripPosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextStopovers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolyline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviousStopovers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrognosisType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStop(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alternative) contextValidateCurrentTripPosition(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentTripPosition != nil {

		if swag.IsZero(m.CurrentTripPosition) { // not required
			return nil
		}

		if err := m.CurrentTripPosition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentTripPosition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentTripPosition")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {

		if swag.IsZero(m.Destination) { // not required
			return nil
		}

		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidateFrames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Frames); i++ {

		if m.Frames[i] != nil {

			if swag.IsZero(m.Frames[i]) { // not required
				return nil
			}

			if err := m.Frames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("frames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("frames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) contextValidateLine(ctx context.Context, formats strfmt.Registry) error {

	if m.Line != nil {

		if swag.IsZero(m.Line) { // not required
			return nil
		}

		if err := m.Line.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidateNextStopovers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NextStopovers); i++ {

		if m.NextStopovers[i] != nil {

			if swag.IsZero(m.NextStopovers[i]) { // not required
				return nil
			}

			if err := m.NextStopovers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nextStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) contextValidateOrigin(ctx context.Context, formats strfmt.Registry) error {

	if m.Origin != nil {

		if swag.IsZero(m.Origin) { // not required
			return nil
		}

		if err := m.Origin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidatePolyline(ctx context.Context, formats strfmt.Registry) error {

	if m.Polyline != nil {

		if swag.IsZero(m.Polyline) { // not required
			return nil
		}

		if err := m.Polyline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

func (m *Alternative) contextValidatePreviousStopovers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreviousStopovers); i++ {

		if m.PreviousStopovers[i] != nil {

			if swag.IsZero(m.PreviousStopovers[i]) { // not required
				return nil
			}

			if err := m.PreviousStopovers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("previousStopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("previousStopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) contextValidatePrognosisType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PrognosisType) { // not required
		return nil
	}

	if err := m.PrognosisType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("prognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("prognosisType")
		}
		return err
	}

	return nil
}

func (m *Alternative) contextValidateRemarks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Remarks); i++ {

		if m.Remarks[i] != nil {

			if swag.IsZero(m.Remarks[i]) { // not required
				return nil
			}

			if err := m.Remarks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Alternative) contextValidateStop(ctx context.Context, formats strfmt.Registry) error {

	if m.Stop != nil {

		if swag.IsZero(m.Stop) { // not required
			return nil
		}

		if err := m.Stop.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alternative) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alternative) UnmarshalBinary(b []byte) error {
	var res Alternative
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
