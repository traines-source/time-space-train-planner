// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TripsByNameOptions trips by name options
//
// swagger:model TripsByNameOptions
type TripsByNameOptions struct {

	// additional filters
	AdditionalFilters []*Filter `json:"additionalFilters"`

	// currently stopping at
	CurrentlyStoppingAt string `json:"currentlyStoppingAt,omitempty"`

	// from when
	// Format: date-time
	FromWhen strfmt.DateTime `json:"fromWhen,omitempty"`

	// line name
	LineName string `json:"lineName,omitempty"`

	// only currently running
	OnlyCurrentlyRunning bool `json:"onlyCurrentlyRunning,omitempty"`

	// operator names
	OperatorNames []string `json:"operatorNames"`

	// products
	Products Products `json:"products,omitempty"`

	// until when
	// Format: date-time
	UntilWhen strfmt.DateTime `json:"untilWhen,omitempty"`

	// departure date, undefined corresponds to Date.Now
	// Format: date-time
	When strfmt.DateTime `json:"when,omitempty"`
}

// Validate validates this trips by name options
func (m *TripsByNameOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUntilWhen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TripsByNameOptions) validateAdditionalFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalFilters); i++ {
		if swag.IsZero(m.AdditionalFilters[i]) { // not required
			continue
		}

		if m.AdditionalFilters[i] != nil {
			if err := m.AdditionalFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TripsByNameOptions) validateFromWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.FromWhen) { // not required
		return nil
	}

	if err := validate.FormatOf("fromWhen", "body", "date-time", m.FromWhen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TripsByNameOptions) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

func (m *TripsByNameOptions) validateUntilWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.UntilWhen) { // not required
		return nil
	}

	if err := validate.FormatOf("untilWhen", "body", "date-time", m.UntilWhen.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TripsByNameOptions) validateWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.When) { // not required
		return nil
	}

	if err := validate.FormatOf("when", "body", "date-time", m.When.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this trips by name options based on the context it is used
func (m *TripsByNameOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TripsByNameOptions) contextValidateAdditionalFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdditionalFilters); i++ {

		if m.AdditionalFilters[i] != nil {

			if swag.IsZero(m.AdditionalFilters[i]) { // not required
				return nil
			}

			if err := m.AdditionalFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("additionalFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TripsByNameOptions) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TripsByNameOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TripsByNameOptions) UnmarshalBinary(b []byte) error {
	var res TripsByNameOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
