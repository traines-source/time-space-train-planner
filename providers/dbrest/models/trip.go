// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trip Trip â€“ a vehicle stopping at a set of stops at specific times
//
// swagger:model Trip
type Trip struct {

	// alternatives
	Alternatives []*Alternative `json:"alternatives"`

	// arrival
	// Format: date-time
	Arrival strfmt.DateTime `json:"arrival,omitempty"`

	// arrival delay
	// Required: true
	ArrivalDelay *float64 `json:"arrivalDelay"`

	// arrival platform
	ArrivalPlatform string `json:"arrivalPlatform,omitempty"`

	// arrival prognosis type
	ArrivalPrognosisType PrognosisType `json:"arrivalPrognosisType,omitempty"`

	// cancelled
	Cancelled bool `json:"cancelled,omitempty"`

	// checkin
	Checkin bool `json:"checkin,omitempty"`

	// current location
	CurrentLocation *Location `json:"currentLocation,omitempty"`

	// cycle
	Cycle *Cycle `json:"cycle,omitempty"`

	// departure
	// Format: date-time
	Departure strfmt.DateTime `json:"departure,omitempty"`

	// departure delay
	// Required: true
	DepartureDelay *float64 `json:"departureDelay"`

	// departure platform
	DeparturePlatform string `json:"departurePlatform,omitempty"`

	// departure prognosis type
	DeparturePrognosisType PrognosisType `json:"departurePrognosisType,omitempty"`

	// destination
	Destination *Stop `json:"destination,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// distance
	Distance float64 `json:"distance,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// line
	Line *Line `json:"line,omitempty"`

	// load factor
	LoadFactor string `json:"loadFactor,omitempty"`

	// operator
	Operator float64 `json:"operator,omitempty"`

	// origin
	Origin *Stop `json:"origin,omitempty"`

	// planned arrival
	// Format: date-time
	PlannedArrival strfmt.DateTime `json:"plannedArrival,omitempty"`

	// planned arrival platform
	PlannedArrivalPlatform string `json:"plannedArrivalPlatform,omitempty"`

	// planned departure
	// Format: date-time
	PlannedDeparture strfmt.DateTime `json:"plannedDeparture,omitempty"`

	// planned departure platform
	PlannedDeparturePlatform string `json:"plannedDeparturePlatform,omitempty"`

	// polyline
	Polyline *FeatureCollection `json:"polyline,omitempty"`

	// price
	Price *Price `json:"price,omitempty"`

	// prognosed arrival
	// Format: date-time
	PrognosedArrival strfmt.DateTime `json:"prognosedArrival,omitempty"`

	// prognosed arrival platform
	PrognosedArrivalPlatform string `json:"prognosedArrivalPlatform,omitempty"`

	// prognosed departure
	// Format: date-time
	PrognosedDeparture strfmt.DateTime `json:"prognosedDeparture,omitempty"`

	// prognosed departure platform
	PrognosedDeparturePlatform string `json:"prognosedDeparturePlatform,omitempty"`

	// public
	Public bool `json:"public,omitempty"`

	// remarks
	Remarks []*Hint `json:"remarks"`

	// schedule
	Schedule float64 `json:"schedule,omitempty"`

	// scheduled days
	ScheduledDays ScheduledDays `json:"scheduledDays,omitempty"`

	// stopovers
	Stopovers []*StopOver `json:"stopovers"`

	// transfer
	Transfer bool `json:"transfer,omitempty"`

	// walking
	Walking bool `json:"walking,omitempty"`
}

// Validate validates this trip
func (m *Trip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternatives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrivalPrognosisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparturePrognosisType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrigin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlannedDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrognosedDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopovers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trip) validateAlternatives(formats strfmt.Registry) error {
	if swag.IsZero(m.Alternatives) { // not required
		return nil
	}

	for i := 0; i < len(m.Alternatives); i++ {
		if swag.IsZero(m.Alternatives[i]) { // not required
			continue
		}

		if m.Alternatives[i] != nil {
			if err := m.Alternatives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alternatives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alternatives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Trip) validateArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.Arrival) { // not required
		return nil
	}

	if err := validate.FormatOf("arrival", "body", "date-time", m.Arrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateArrivalDelay(formats strfmt.Registry) error {

	if err := validate.Required("arrivalDelay", "body", m.ArrivalDelay); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateArrivalPrognosisType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrivalPrognosisType) { // not required
		return nil
	}

	if err := m.ArrivalPrognosisType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arrivalPrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arrivalPrognosisType")
		}
		return err
	}

	return nil
}

func (m *Trip) validateCurrentLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentLocation) { // not required
		return nil
	}

	if m.CurrentLocation != nil {
		if err := m.CurrentLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validateCycle(formats strfmt.Registry) error {
	if swag.IsZero(m.Cycle) { // not required
		return nil
	}

	if m.Cycle != nil {
		if err := m.Cycle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validateDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.Departure) { // not required
		return nil
	}

	if err := validate.FormatOf("departure", "body", "date-time", m.Departure.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateDepartureDelay(formats strfmt.Registry) error {

	if err := validate.Required("departureDelay", "body", m.DepartureDelay); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateDeparturePrognosisType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeparturePrognosisType) { // not required
		return nil
	}

	if err := m.DeparturePrognosisType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("departurePrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("departurePrognosisType")
		}
		return err
	}

	return nil
}

func (m *Trip) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validateLine(formats strfmt.Registry) error {
	if swag.IsZero(m.Line) { // not required
		return nil
	}

	if m.Line != nil {
		if err := m.Line.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validateOrigin(formats strfmt.Registry) error {
	if swag.IsZero(m.Origin) { // not required
		return nil
	}

	if m.Origin != nil {
		if err := m.Origin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validatePlannedArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.PlannedArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("plannedArrival", "body", "date-time", m.PlannedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validatePlannedDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.PlannedDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("plannedDeparture", "body", "date-time", m.PlannedDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validatePolyline(formats strfmt.Registry) error {
	if swag.IsZero(m.Polyline) { // not required
		return nil
	}

	if m.Polyline != nil {
		if err := m.Polyline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validatePrognosedArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosedArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("prognosedArrival", "body", "date-time", m.PrognosedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validatePrognosedDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.PrognosedDeparture) { // not required
		return nil
	}

	if err := validate.FormatOf("prognosedDeparture", "body", "date-time", m.PrognosedDeparture.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateRemarks(formats strfmt.Registry) error {
	if swag.IsZero(m.Remarks) { // not required
		return nil
	}

	for i := 0; i < len(m.Remarks); i++ {
		if swag.IsZero(m.Remarks[i]) { // not required
			continue
		}

		if m.Remarks[i] != nil {
			if err := m.Remarks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Trip) validateScheduledDays(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDays) { // not required
		return nil
	}

	if m.ScheduledDays != nil {
		if err := m.ScheduledDays.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDays")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDays")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) validateStopovers(formats strfmt.Registry) error {
	if swag.IsZero(m.Stopovers) { // not required
		return nil
	}

	for i := 0; i < len(m.Stopovers); i++ {
		if swag.IsZero(m.Stopovers[i]) { // not required
			continue
		}

		if m.Stopovers[i] != nil {
			if err := m.Stopovers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this trip based on the context it is used
func (m *Trip) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlternatives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrivalPrognosisType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCycle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeparturePrognosisType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLine(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrigin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolyline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemarks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopovers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trip) contextValidateAlternatives(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Alternatives); i++ {

		if m.Alternatives[i] != nil {

			if swag.IsZero(m.Alternatives[i]) { // not required
				return nil
			}

			if err := m.Alternatives[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alternatives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alternatives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Trip) contextValidateArrivalPrognosisType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ArrivalPrognosisType) { // not required
		return nil
	}

	if err := m.ArrivalPrognosisType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("arrivalPrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("arrivalPrognosisType")
		}
		return err
	}

	return nil
}

func (m *Trip) contextValidateCurrentLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentLocation != nil {

		if swag.IsZero(m.CurrentLocation) { // not required
			return nil
		}

		if err := m.CurrentLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidateCycle(ctx context.Context, formats strfmt.Registry) error {

	if m.Cycle != nil {

		if swag.IsZero(m.Cycle) { // not required
			return nil
		}

		if err := m.Cycle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cycle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cycle")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidateDeparturePrognosisType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DeparturePrognosisType) { // not required
		return nil
	}

	if err := m.DeparturePrognosisType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("departurePrognosisType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("departurePrognosisType")
		}
		return err
	}

	return nil
}

func (m *Trip) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {

		if swag.IsZero(m.Destination) { // not required
			return nil
		}

		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidateLine(ctx context.Context, formats strfmt.Registry) error {

	if m.Line != nil {

		if swag.IsZero(m.Line) { // not required
			return nil
		}

		if err := m.Line.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("line")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("line")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidateOrigin(ctx context.Context, formats strfmt.Registry) error {

	if m.Origin != nil {

		if swag.IsZero(m.Origin) { // not required
			return nil
		}

		if err := m.Origin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("origin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("origin")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidatePolyline(ctx context.Context, formats strfmt.Registry) error {

	if m.Polyline != nil {

		if swag.IsZero(m.Polyline) { // not required
			return nil
		}

		if err := m.Polyline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("polyline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("polyline")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {

		if swag.IsZero(m.Price) { // not required
			return nil
		}

		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *Trip) contextValidateRemarks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Remarks); i++ {

		if m.Remarks[i] != nil {

			if swag.IsZero(m.Remarks[i]) { // not required
				return nil
			}

			if err := m.Remarks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remarks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("remarks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Trip) contextValidateScheduledDays(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledDays) { // not required
		return nil
	}

	if err := m.ScheduledDays.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("scheduledDays")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("scheduledDays")
		}
		return err
	}

	return nil
}

func (m *Trip) contextValidateStopovers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stopovers); i++ {

		if m.Stopovers[i] != nil {

			if swag.IsZero(m.Stopovers[i]) { // not required
				return nil
			}

			if err := m.Stopovers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopovers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopovers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trip) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trip) UnmarshalBinary(b []byte) error {
	var res Trip
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
