// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feature feature
//
// swagger:model Feature
type Feature struct {

	// geometry
	Geometry *Geometry `json:"geometry,omitempty"`

	// properties
	Properties *Stop `json:"properties,omitempty"`

	// type
	// Enum: ["Feature"]
	Type string `json:"type,omitempty"`
}

// Validate validates this feature
func (m *Feature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeometry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feature) validateGeometry(formats strfmt.Registry) error {
	if swag.IsZero(m.Geometry) { // not required
		return nil
	}

	if m.Geometry != nil {
		if err := m.Geometry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geometry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geometry")
			}
			return err
		}
	}

	return nil
}

func (m *Feature) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

var featureTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Feature"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		featureTypeTypePropEnum = append(featureTypeTypePropEnum, v)
	}
}

const (

	// FeatureTypeFeature captures enum value "Feature"
	FeatureTypeFeature string = "Feature"
)

// prop value enum
func (m *Feature) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, featureTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Feature) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this feature based on the context it is used
func (m *Feature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeometry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feature) contextValidateGeometry(ctx context.Context, formats strfmt.Registry) error {

	if m.Geometry != nil {

		if swag.IsZero(m.Geometry) { // not required
			return nil
		}

		if err := m.Geometry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geometry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geometry")
			}
			return err
		}
	}

	return nil
}

func (m *Feature) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {

		if swag.IsZero(m.Properties) { // not required
			return nil
		}

		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Feature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feature) UnmarshalBinary(b []byte) error {
	var res Feature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
