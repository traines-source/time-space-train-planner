// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PrognosisType prognosis type
//
// swagger:model PrognosisType
type PrognosisType string

func NewPrognosisType(value PrognosisType) *PrognosisType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PrognosisType.
func (m PrognosisType) Pointer() *PrognosisType {
	return &m
}

const (

	// PrognosisTypeCalculated captures enum value "calculated"
	PrognosisTypeCalculated PrognosisType = "calculated"

	// PrognosisTypePrognosed captures enum value "prognosed"
	PrognosisTypePrognosed PrognosisType = "prognosed"
)

// for schema
var prognosisTypeEnum []interface{}

func init() {
	var res []PrognosisType
	if err := json.Unmarshal([]byte(`["calculated","prognosed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		prognosisTypeEnum = append(prognosisTypeEnum, v)
	}
}

func (m PrognosisType) validatePrognosisTypeEnum(path, location string, value PrognosisType) error {
	if err := validate.EnumCase(path, location, value, prognosisTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this prognosis type
func (m PrognosisType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePrognosisTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this prognosis type based on context it is used
func (m PrognosisType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
