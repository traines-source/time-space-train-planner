// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JourneysOptionsCommon journeys options common
//
// swagger:model JourneysOptionsCommon
type JourneysOptionsCommon struct {

	// 'none', 'partial' or 'complete'
	Accessibility *string `json:"accessibility,omitempty"`

	// arrival date, departure and arrival are mutually exclusive.
	// Format: date-time
	Arrival strfmt.DateTime `json:"arrival,omitempty"`

	// only bike-friendly journeys
	Bike *bool `json:"bike,omitempty"`

	// departure date, undefined corresponds to Date.Now
	// Format: date-time
	Departure strfmt.DateTime `json:"departure,omitempty"`

	// earlierThan, use {@link Journeys#earlierRef}, earlierThan and departure/arrival are mutually exclusive.
	EarlierThan *string `json:"earlierThan,omitempty"`

	// parse & expose entrances of stops/stations?
	Entrances *bool `json:"entrances,omitempty"`

	// language to get results in
	Language *string `json:"language,omitempty"`

	// laterThan, use {@link Journeys#laterRef}, laterThan and departure/arrival are mutually exclusive.
	LaterThan *string `json:"laterThan,omitempty"`

	// return a shape for each leg?
	Polylines *bool `json:"polylines,omitempty"`

	// products
	Products Products `json:"products,omitempty"`

	// parse & expose hints & warnings?
	Remarks *bool `json:"remarks,omitempty"`

	// how many search results?
	Results *float64 `json:"results,omitempty"`

	// parse which days each journey is valid on
	ScheduledDays *bool `json:"scheduledDays,omitempty"`

	// start with walking
	StartWithWalking *bool `json:"startWithWalking,omitempty"`

	// return stations on the way?
	Stopovers *bool `json:"stopovers,omitempty"`

	// parse & expose sub-stops of stations?
	SubStops *bool `json:"subStops,omitempty"`

	// return tickets? only available with some profiles
	Tickets *bool `json:"tickets,omitempty"`

	// minimum time for a single transfer in minutes
	TransferTime *float64 `json:"transferTime,omitempty"`

	// Maximum nr of transfers. Default: Let HAFAS decide.
	Transfers *float64 `json:"transfers,omitempty"`

	// let journeys pass this station
	Via *string `json:"via,omitempty"`

	// 'slow', 'normal', 'fast'
	WalkingSpeed *string `json:"walkingSpeed,omitempty"`

	// when
	// Format: date-time
	When strfmt.DateTime `json:"when,omitempty"`
}

// Validate validates this journeys options common
func (m *JourneysOptionsCommon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeparture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysOptionsCommon) validateArrival(formats strfmt.Registry) error {
	if swag.IsZero(m.Arrival) { // not required
		return nil
	}

	if err := validate.FormatOf("arrival", "body", "date-time", m.Arrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JourneysOptionsCommon) validateDeparture(formats strfmt.Registry) error {
	if swag.IsZero(m.Departure) { // not required
		return nil
	}

	if err := validate.FormatOf("departure", "body", "date-time", m.Departure.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JourneysOptionsCommon) validateProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if m.Products != nil {
		if err := m.Products.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("products")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("products")
			}
			return err
		}
	}

	return nil
}

func (m *JourneysOptionsCommon) validateWhen(formats strfmt.Registry) error {
	if swag.IsZero(m.When) { // not required
		return nil
	}

	if err := validate.FormatOf("when", "body", "date-time", m.When.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this journeys options common based on the context it is used
func (m *JourneysOptionsCommon) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JourneysOptionsCommon) contextValidateProducts(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Products) { // not required
		return nil
	}

	if err := m.Products.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("products")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("products")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JourneysOptionsCommon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JourneysOptionsCommon) UnmarshalBinary(b []byte) error {
	var res JourneysOptionsCommon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
