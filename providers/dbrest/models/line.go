// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Line line
//
// swagger:model Line
type Line struct {

	// additional name
	AdditionalName string `json:"additionalName,omitempty"`

	// admin code
	AdminCode string `json:"adminCode,omitempty"`

	// directions
	Directions []string `json:"directions"`

	// express
	Express bool `json:"express,omitempty"`

	// fahrt nr
	FahrtNr string `json:"fahrtNr,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// metro
	Metro bool `json:"metro,omitempty"`

	// mode
	// Enum: ["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]
	Mode string `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// night
	Night bool `json:"night,omitempty"`

	// nr
	Nr float64 `json:"nr,omitempty"`

	// operator
	Operator *Operator `json:"operator,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// product name
	ProductName string `json:"productName,omitempty"`

	// public
	Public bool `json:"public,omitempty"`

	// routes ids
	Routes []string `json:"routes"`

	// symbol
	Symbol string `json:"symbol,omitempty"`

	// type
	// Enum: ["line"]
	Type string `json:"type,omitempty"`
}

// Validate validates this line
func (m *Line) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var lineTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aircraft","bicycle","bus","car","gondola","taxi","train","walking","watercraft"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineTypeModePropEnum = append(lineTypeModePropEnum, v)
	}
}

const (

	// LineModeAircraft captures enum value "aircraft"
	LineModeAircraft string = "aircraft"

	// LineModeBicycle captures enum value "bicycle"
	LineModeBicycle string = "bicycle"

	// LineModeBus captures enum value "bus"
	LineModeBus string = "bus"

	// LineModeCar captures enum value "car"
	LineModeCar string = "car"

	// LineModeGondola captures enum value "gondola"
	LineModeGondola string = "gondola"

	// LineModeTaxi captures enum value "taxi"
	LineModeTaxi string = "taxi"

	// LineModeTrain captures enum value "train"
	LineModeTrain string = "train"

	// LineModeWalking captures enum value "walking"
	LineModeWalking string = "walking"

	// LineModeWatercraft captures enum value "watercraft"
	LineModeWatercraft string = "watercraft"
)

// prop value enum
func (m *Line) validateModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lineTypeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Line) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("mode", "body", m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	if m.Operator != nil {
		if err := m.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

var lineTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["line"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lineTypeTypePropEnum = append(lineTypeTypePropEnum, v)
	}
}

const (

	// LineTypeLine captures enum value "line"
	LineTypeLine string = "line"
)

// prop value enum
func (m *Line) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lineTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Line) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this line based on the context it is used
func (m *Line) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Line) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.Operator != nil {

		if swag.IsZero(m.Operator) { // not required
			return nil
		}

		if err := m.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Line) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Line) UnmarshalBinary(b []byte) error {
	var res Line
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
